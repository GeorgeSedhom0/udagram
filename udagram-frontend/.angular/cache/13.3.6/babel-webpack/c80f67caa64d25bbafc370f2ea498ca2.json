{"ast":null,"code":"import _defineProperty from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _createForOfIteratorHelper from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as raf } from './helpers-4d272360.js';\nvar animationPrefix;\n/**\n * Web Animations requires hyphenated CSS properties\n * to be written in camelCase when animating\n */\n\nvar processKeyframes = function processKeyframes(keyframes) {\n  keyframes.forEach(function (keyframe) {\n    for (var key in keyframe) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (keyframe.hasOwnProperty(key)) {\n        var value = keyframe[key];\n\n        if (key === 'easing') {\n          var newKey = 'animation-timing-function';\n          keyframe[newKey] = value;\n          delete keyframe[key];\n        } else {\n          var _newKey = convertCamelCaseToHypen(key);\n\n          if (_newKey !== key) {\n            keyframe[_newKey] = value;\n            delete keyframe[key];\n          }\n        }\n      }\n    }\n  });\n  return keyframes;\n};\n\nvar convertCamelCaseToHypen = function convertCamelCaseToHypen(str) {\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n};\n\nvar getAnimationPrefix = function getAnimationPrefix(el) {\n  if (animationPrefix === undefined) {\n    var supportsUnprefixed = el.style.animationName !== undefined;\n    var supportsWebkitPrefix = el.style.webkitAnimationName !== undefined;\n    animationPrefix = !supportsUnprefixed && supportsWebkitPrefix ? '-webkit-' : '';\n  }\n\n  return animationPrefix;\n};\n\nvar setStyleProperty = function setStyleProperty(element, propertyName, value) {\n  var prefix = propertyName.startsWith('animation') ? getAnimationPrefix(element) : '';\n  element.style.setProperty(prefix + propertyName, value);\n};\n\nvar removeStyleProperty = function removeStyleProperty(element, propertyName) {\n  var prefix = propertyName.startsWith('animation') ? getAnimationPrefix(element) : '';\n  element.style.removeProperty(prefix + propertyName);\n};\n\nvar animationEnd = function animationEnd(el, callback) {\n  var unRegTrans;\n  var opts = {\n    passive: true\n  };\n\n  var unregister = function unregister() {\n    if (unRegTrans) {\n      unRegTrans();\n    }\n  };\n\n  var onTransitionEnd = function onTransitionEnd(ev) {\n    if (el === ev.target) {\n      unregister();\n      callback(ev);\n    }\n  };\n\n  if (el) {\n    el.addEventListener('webkitAnimationEnd', onTransitionEnd, opts);\n    el.addEventListener('animationend', onTransitionEnd, opts);\n\n    unRegTrans = function unRegTrans() {\n      el.removeEventListener('webkitAnimationEnd', onTransitionEnd, opts);\n      el.removeEventListener('animationend', onTransitionEnd, opts);\n    };\n  }\n\n  return unregister;\n};\n\nvar generateKeyframeRules = function generateKeyframeRules() {\n  var keyframes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return keyframes.map(function (keyframe) {\n    var offset = keyframe.offset;\n    var frameString = [];\n\n    for (var property in keyframe) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (keyframe.hasOwnProperty(property) && property !== 'offset') {\n        frameString.push(\"\".concat(property, \": \").concat(keyframe[property], \";\"));\n      }\n    }\n\n    return \"\".concat(offset * 100, \"% { \").concat(frameString.join(' '), \" }\");\n  }).join(' ');\n};\n\nvar keyframeIds = [];\n\nvar generateKeyframeName = function generateKeyframeName(keyframeRules) {\n  var index = keyframeIds.indexOf(keyframeRules);\n\n  if (index < 0) {\n    index = keyframeIds.push(keyframeRules) - 1;\n  }\n\n  return \"ion-animation-\".concat(index);\n};\n\nvar getStyleContainer = function getStyleContainer(element) {\n  var rootNode = element.getRootNode();\n  return rootNode.head || rootNode;\n};\n\nvar createKeyframeStylesheet = function createKeyframeStylesheet(keyframeName, keyframeRules, element) {\n  var styleContainer = getStyleContainer(element);\n  var keyframePrefix = getAnimationPrefix(element);\n  var existingStylesheet = styleContainer.querySelector('#' + keyframeName);\n\n  if (existingStylesheet) {\n    return existingStylesheet;\n  }\n\n  var stylesheet = (element.ownerDocument || document).createElement('style');\n  stylesheet.id = keyframeName;\n  stylesheet.textContent = \"@\".concat(keyframePrefix, \"keyframes \").concat(keyframeName, \" { \").concat(keyframeRules, \" } @\").concat(keyframePrefix, \"keyframes \").concat(keyframeName, \"-alt { \").concat(keyframeRules, \" }\");\n  styleContainer.appendChild(stylesheet);\n  return stylesheet;\n};\n\nvar addClassToArray = function addClassToArray() {\n  var classes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var className = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (className !== undefined) {\n    var classNameToAppend = Array.isArray(className) ? className : [className];\n    return [].concat(_toConsumableArray(classes), _toConsumableArray(classNameToAppend));\n  }\n\n  return classes;\n};\n\nvar createAnimation = function createAnimation(animationId) {\n  var _delay;\n\n  var _duration;\n\n  var _easing;\n\n  var _iterations;\n\n  var _fill;\n\n  var _direction;\n\n  var _keyframes = [];\n  var beforeAddClasses = [];\n  var beforeRemoveClasses = [];\n  var initialized = false;\n  var parentAnimation;\n  var beforeStylesValue = {};\n  var afterAddClasses = [];\n  var afterRemoveClasses = [];\n  var afterStylesValue = {};\n  var numAnimationsRunning = 0;\n  var shouldForceLinearEasing = false;\n  var shouldForceSyncPlayback = false;\n  var cssAnimationsTimerFallback;\n  var forceDirectionValue;\n  var forceDurationValue;\n  var forceDelayValue;\n  var willComplete = true;\n  var finished = false;\n  var shouldCalculateNumAnimations = true;\n  var keyframeName;\n  var ani;\n  var paused = false;\n  var id = animationId;\n  var onFinishCallbacks = [];\n  var onFinishOneTimeCallbacks = [];\n  var elements = [];\n  var childAnimations = [];\n  var stylesheets = [];\n  var _beforeAddReadFunctions = [];\n  var _beforeAddWriteFunctions = [];\n  var _afterAddReadFunctions = [];\n  var _afterAddWriteFunctions = [];\n  var webAnimations = [];\n  var supportsAnimationEffect = typeof AnimationEffect === 'function' || typeof window.AnimationEffect === 'function';\n  var supportsWebAnimations = typeof Element === 'function' && typeof Element.prototype.animate === 'function' && supportsAnimationEffect;\n  var ANIMATION_END_FALLBACK_PADDING_MS = 100;\n\n  var getWebAnimations = function getWebAnimations() {\n    return webAnimations;\n  };\n\n  var destroy = function destroy(clearStyleSheets) {\n    childAnimations.forEach(function (childAnimation) {\n      childAnimation.destroy(clearStyleSheets);\n    });\n    cleanUp(clearStyleSheets);\n    elements.length = 0;\n    childAnimations.length = 0;\n    _keyframes.length = 0;\n    clearOnFinish();\n    initialized = false;\n    shouldCalculateNumAnimations = true;\n    return ani;\n  };\n  /**\n   * Cancels any Web Animations, removes\n   * any animation properties from the\n   * animation's elements, and removes the\n   * animation's stylesheets from the DOM.\n   */\n\n\n  var cleanUp = function cleanUp(clearStyleSheets) {\n    cleanUpElements();\n\n    if (clearStyleSheets) {\n      cleanUpStyleSheets();\n    }\n  };\n\n  var resetFlags = function resetFlags() {\n    shouldForceLinearEasing = false;\n    shouldForceSyncPlayback = false;\n    shouldCalculateNumAnimations = true;\n    forceDirectionValue = undefined;\n    forceDurationValue = undefined;\n    forceDelayValue = undefined;\n    numAnimationsRunning = 0;\n    finished = false;\n    willComplete = true;\n    paused = false;\n  };\n\n  var isRunning = function isRunning() {\n    return numAnimationsRunning !== 0 && !paused;\n  };\n\n  var onFinish = function onFinish(callback, opts) {\n    var callbacks = (opts === null || opts === void 0 ? void 0 : opts.oneTimeCallback) ? onFinishOneTimeCallbacks : onFinishCallbacks;\n    callbacks.push({\n      c: callback,\n      o: opts\n    });\n    return ani;\n  };\n\n  var clearOnFinish = function clearOnFinish() {\n    onFinishCallbacks.length = 0;\n    onFinishOneTimeCallbacks.length = 0;\n    return ani;\n  };\n  /**\n   * Cancels any Web Animations and removes\n   * any animation properties from the\n   * the animation's elements.\n   */\n\n\n  var cleanUpElements = function cleanUpElements() {\n    if (supportsWebAnimations) {\n      webAnimations.forEach(function (animation) {\n        animation.cancel();\n      });\n      webAnimations.length = 0;\n    } else {\n      var elementsArray = elements.slice();\n      raf(function () {\n        elementsArray.forEach(function (element) {\n          removeStyleProperty(element, 'animation-name');\n          removeStyleProperty(element, 'animation-duration');\n          removeStyleProperty(element, 'animation-timing-function');\n          removeStyleProperty(element, 'animation-iteration-count');\n          removeStyleProperty(element, 'animation-delay');\n          removeStyleProperty(element, 'animation-play-state');\n          removeStyleProperty(element, 'animation-fill-mode');\n          removeStyleProperty(element, 'animation-direction');\n        });\n      });\n    }\n  };\n  /**\n   * Removes the animation's stylesheets\n   * from the DOM.\n   */\n\n\n  var cleanUpStyleSheets = function cleanUpStyleSheets() {\n    stylesheets.forEach(function (stylesheet) {\n      /**\n       * When sharing stylesheets, it's possible\n       * for another animation to have already\n       * cleaned up a particular stylesheet\n       */\n      if (stylesheet === null || stylesheet === void 0 ? void 0 : stylesheet.parentNode) {\n        stylesheet.parentNode.removeChild(stylesheet);\n      }\n    });\n    stylesheets.length = 0;\n  };\n\n  var beforeAddRead = function beforeAddRead(readFn) {\n    _beforeAddReadFunctions.push(readFn);\n\n    return ani;\n  };\n\n  var beforeAddWrite = function beforeAddWrite(writeFn) {\n    _beforeAddWriteFunctions.push(writeFn);\n\n    return ani;\n  };\n\n  var afterAddRead = function afterAddRead(readFn) {\n    _afterAddReadFunctions.push(readFn);\n\n    return ani;\n  };\n\n  var afterAddWrite = function afterAddWrite(writeFn) {\n    _afterAddWriteFunctions.push(writeFn);\n\n    return ani;\n  };\n\n  var beforeAddClass = function beforeAddClass(className) {\n    beforeAddClasses = addClassToArray(beforeAddClasses, className);\n    return ani;\n  };\n\n  var beforeRemoveClass = function beforeRemoveClass(className) {\n    beforeRemoveClasses = addClassToArray(beforeRemoveClasses, className);\n    return ani;\n  };\n  /**\n   * Set CSS inline styles to the animation's\n   * elements before the animation begins.\n   */\n\n\n  var beforeStyles = function beforeStyles() {\n    var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    beforeStylesValue = styles;\n    return ani;\n  };\n  /**\n   * Clear CSS inline styles from the animation's\n   * elements before the animation begins.\n   */\n\n\n  var beforeClearStyles = function beforeClearStyles() {\n    var propertyNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var _iterator = _createForOfIteratorHelper(propertyNames),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var property = _step.value;\n        beforeStylesValue[property] = '';\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return ani;\n  };\n\n  var afterAddClass = function afterAddClass(className) {\n    afterAddClasses = addClassToArray(afterAddClasses, className);\n    return ani;\n  };\n\n  var afterRemoveClass = function afterRemoveClass(className) {\n    afterRemoveClasses = addClassToArray(afterRemoveClasses, className);\n    return ani;\n  };\n\n  var afterStyles = function afterStyles() {\n    var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    afterStylesValue = styles;\n    return ani;\n  };\n\n  var afterClearStyles = function afterClearStyles() {\n    var propertyNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var _iterator2 = _createForOfIteratorHelper(propertyNames),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var property = _step2.value;\n        afterStylesValue[property] = '';\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return ani;\n  };\n\n  var getFill = function getFill() {\n    if (_fill !== undefined) {\n      return _fill;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getFill();\n    }\n\n    return 'both';\n  };\n\n  var getDirection = function getDirection() {\n    if (forceDirectionValue !== undefined) {\n      return forceDirectionValue;\n    }\n\n    if (_direction !== undefined) {\n      return _direction;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDirection();\n    }\n\n    return 'normal';\n  };\n\n  var getEasing = function getEasing() {\n    if (shouldForceLinearEasing) {\n      return 'linear';\n    }\n\n    if (_easing !== undefined) {\n      return _easing;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getEasing();\n    }\n\n    return 'linear';\n  };\n\n  var getDuration = function getDuration() {\n    if (shouldForceSyncPlayback) {\n      return 0;\n    }\n\n    if (forceDurationValue !== undefined) {\n      return forceDurationValue;\n    }\n\n    if (_duration !== undefined) {\n      return _duration;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDuration();\n    }\n\n    return 0;\n  };\n\n  var getIterations = function getIterations() {\n    if (_iterations !== undefined) {\n      return _iterations;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getIterations();\n    }\n\n    return 1;\n  };\n\n  var getDelay = function getDelay() {\n    if (forceDelayValue !== undefined) {\n      return forceDelayValue;\n    }\n\n    if (_delay !== undefined) {\n      return _delay;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDelay();\n    }\n\n    return 0;\n  };\n\n  var getKeyframes = function getKeyframes() {\n    return _keyframes;\n  };\n\n  var direction = function direction(animationDirection) {\n    _direction = animationDirection;\n    update(true);\n    return ani;\n  };\n\n  var fill = function fill(animationFill) {\n    _fill = animationFill;\n    update(true);\n    return ani;\n  };\n\n  var delay = function delay(animationDelay) {\n    _delay = animationDelay;\n    update(true);\n    return ani;\n  };\n\n  var easing = function easing(animationEasing) {\n    _easing = animationEasing;\n    update(true);\n    return ani;\n  };\n\n  var duration = function duration(animationDuration) {\n    /**\n     * CSS Animation Durations of 0ms work fine on Chrome\n     * but do not run on Safari, so force it to 1ms to\n     * get it to run on both platforms.\n     */\n    if (!supportsWebAnimations && animationDuration === 0) {\n      animationDuration = 1;\n    }\n\n    _duration = animationDuration;\n    update(true);\n    return ani;\n  };\n\n  var iterations = function iterations(animationIterations) {\n    _iterations = animationIterations;\n    update(true);\n    return ani;\n  };\n\n  var parent = function parent(animation) {\n    parentAnimation = animation;\n    return ani;\n  };\n\n  var addElement = function addElement(el) {\n    if (el != null) {\n      if (el.nodeType === 1) {\n        elements.push(el);\n      } else if (el.length >= 0) {\n        for (var i = 0; i < el.length; i++) {\n          elements.push(el[i]);\n        }\n      } else {\n        console.error('Invalid addElement value');\n      }\n    }\n\n    return ani;\n  };\n\n  var addAnimation = function addAnimation(animationToAdd) {\n    if (animationToAdd != null) {\n      if (Array.isArray(animationToAdd)) {\n        var _iterator3 = _createForOfIteratorHelper(animationToAdd),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var animation = _step3.value;\n            animation.parent(ani);\n            childAnimations.push(animation);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        animationToAdd.parent(ani);\n        childAnimations.push(animationToAdd);\n      }\n    }\n\n    return ani;\n  };\n\n  var keyframes = function keyframes(keyframeValues) {\n    var different = _keyframes !== keyframeValues;\n    _keyframes = keyframeValues;\n\n    if (different) {\n      updateKeyframes(_keyframes);\n    }\n\n    return ani;\n  };\n\n  var updateKeyframes = function updateKeyframes(keyframeValues) {\n    if (supportsWebAnimations) {\n      getWebAnimations().forEach(function (animation) {\n        if (animation.effect.setKeyframes) {\n          animation.effect.setKeyframes(keyframeValues);\n        } else {\n          var newEffect = new KeyframeEffect(animation.effect.target, keyframeValues, animation.effect.getTiming());\n          animation.effect = newEffect;\n        }\n      });\n    } else {\n      initializeCSSAnimation();\n    }\n  };\n  /**\n   * Run all \"before\" animation hooks.\n   */\n\n\n  var beforeAnimation = function beforeAnimation() {\n    // Runs all before read callbacks\n    _beforeAddReadFunctions.forEach(function (callback) {\n      return callback();\n    }); // Runs all before write callbacks\n\n\n    _beforeAddWriteFunctions.forEach(function (callback) {\n      return callback();\n    }); // Updates styles and classes before animation runs\n\n\n    var addClasses = beforeAddClasses;\n    var removeClasses = beforeRemoveClasses;\n    var styles = beforeStylesValue;\n    elements.forEach(function (el) {\n      var elementClassList = el.classList;\n      addClasses.forEach(function (c) {\n        return elementClassList.add(c);\n      });\n      removeClasses.forEach(function (c) {\n        return elementClassList.remove(c);\n      });\n\n      for (var property in styles) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (styles.hasOwnProperty(property)) {\n          setStyleProperty(el, property, styles[property]);\n        }\n      }\n    });\n  };\n  /**\n   * Run all \"after\" animation hooks.\n   */\n\n\n  var afterAnimation = function afterAnimation() {\n    clearCSSAnimationsTimeout(); // Runs all after read callbacks\n\n    _afterAddReadFunctions.forEach(function (callback) {\n      return callback();\n    }); // Runs all after write callbacks\n\n\n    _afterAddWriteFunctions.forEach(function (callback) {\n      return callback();\n    }); // Updates styles and classes before animation ends\n\n\n    var currentStep = willComplete ? 1 : 0;\n    var addClasses = afterAddClasses;\n    var removeClasses = afterRemoveClasses;\n    var styles = afterStylesValue;\n    elements.forEach(function (el) {\n      var elementClassList = el.classList;\n      addClasses.forEach(function (c) {\n        return elementClassList.add(c);\n      });\n      removeClasses.forEach(function (c) {\n        return elementClassList.remove(c);\n      });\n\n      for (var property in styles) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (styles.hasOwnProperty(property)) {\n          setStyleProperty(el, property, styles[property]);\n        }\n      }\n    });\n    onFinishCallbacks.forEach(function (onFinishCallback) {\n      return onFinishCallback.c(currentStep, ani);\n    });\n    onFinishOneTimeCallbacks.forEach(function (onFinishCallback) {\n      return onFinishCallback.c(currentStep, ani);\n    });\n    onFinishOneTimeCallbacks.length = 0;\n    shouldCalculateNumAnimations = true;\n\n    if (willComplete) {\n      finished = true;\n    }\n\n    willComplete = true;\n  };\n\n  var animationFinish = function animationFinish() {\n    if (numAnimationsRunning === 0) {\n      return;\n    }\n\n    numAnimationsRunning--;\n\n    if (numAnimationsRunning === 0) {\n      afterAnimation();\n\n      if (parentAnimation) {\n        parentAnimation.animationFinish();\n      }\n    }\n  };\n\n  var initializeCSSAnimation = function initializeCSSAnimation() {\n    var toggleAnimationName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    cleanUpStyleSheets();\n    var processedKeyframes = processKeyframes(_keyframes);\n    elements.forEach(function (element) {\n      if (processedKeyframes.length > 0) {\n        var keyframeRules = generateKeyframeRules(processedKeyframes);\n        keyframeName = animationId !== undefined ? animationId : generateKeyframeName(keyframeRules);\n        var stylesheet = createKeyframeStylesheet(keyframeName, keyframeRules, element);\n        stylesheets.push(stylesheet);\n        setStyleProperty(element, 'animation-duration', \"\".concat(getDuration(), \"ms\"));\n        setStyleProperty(element, 'animation-timing-function', getEasing());\n        setStyleProperty(element, 'animation-delay', \"\".concat(getDelay(), \"ms\"));\n        setStyleProperty(element, 'animation-fill-mode', getFill());\n        setStyleProperty(element, 'animation-direction', getDirection());\n        var iterationsCount = getIterations() === Infinity ? 'infinite' : getIterations().toString();\n        setStyleProperty(element, 'animation-iteration-count', iterationsCount);\n        setStyleProperty(element, 'animation-play-state', 'paused');\n\n        if (toggleAnimationName) {\n          setStyleProperty(element, 'animation-name', \"\".concat(stylesheet.id, \"-alt\"));\n        }\n\n        raf(function () {\n          setStyleProperty(element, 'animation-name', stylesheet.id || null);\n        });\n      }\n    });\n  };\n\n  var initializeWebAnimation = function initializeWebAnimation() {\n    elements.forEach(function (element) {\n      var animation = element.animate(_keyframes, {\n        id: id,\n        delay: getDelay(),\n        duration: getDuration(),\n        easing: getEasing(),\n        iterations: getIterations(),\n        fill: getFill(),\n        direction: getDirection()\n      });\n      animation.pause();\n      webAnimations.push(animation);\n    });\n\n    if (webAnimations.length > 0) {\n      webAnimations[0].onfinish = function () {\n        animationFinish();\n      };\n    }\n  };\n\n  var initializeAnimation = function initializeAnimation() {\n    var toggleAnimationName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    beforeAnimation();\n\n    if (_keyframes.length > 0) {\n      if (supportsWebAnimations) {\n        initializeWebAnimation();\n      } else {\n        initializeCSSAnimation(toggleAnimationName);\n      }\n    }\n\n    initialized = true;\n  };\n\n  var setAnimationStep = function setAnimationStep(step) {\n    step = Math.min(Math.max(step, 0), 0.9999);\n\n    if (supportsWebAnimations) {\n      webAnimations.forEach(function (animation) {\n        animation.currentTime = animation.effect.getComputedTiming().delay + getDuration() * step;\n        animation.pause();\n      });\n    } else {\n      var animationDuration = \"-\".concat(getDuration() * step, \"ms\");\n      elements.forEach(function (element) {\n        if (_keyframes.length > 0) {\n          setStyleProperty(element, 'animation-delay', animationDuration);\n          setStyleProperty(element, 'animation-play-state', 'paused');\n        }\n      });\n    }\n  };\n\n  var updateWebAnimation = function updateWebAnimation(step) {\n    webAnimations.forEach(function (animation) {\n      animation.effect.updateTiming({\n        delay: getDelay(),\n        duration: getDuration(),\n        easing: getEasing(),\n        iterations: getIterations(),\n        fill: getFill(),\n        direction: getDirection()\n      });\n    });\n\n    if (step !== undefined) {\n      setAnimationStep(step);\n    }\n  };\n\n  var updateCSSAnimation = function updateCSSAnimation() {\n    var toggleAnimationName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var step = arguments.length > 1 ? arguments[1] : undefined;\n    raf(function () {\n      elements.forEach(function (element) {\n        setStyleProperty(element, 'animation-name', keyframeName || null);\n        setStyleProperty(element, 'animation-duration', \"\".concat(getDuration(), \"ms\"));\n        setStyleProperty(element, 'animation-timing-function', getEasing());\n        setStyleProperty(element, 'animation-delay', step !== undefined ? \"-\".concat(step * getDuration(), \"ms\") : \"\".concat(getDelay(), \"ms\"));\n        setStyleProperty(element, 'animation-fill-mode', getFill() || null);\n        setStyleProperty(element, 'animation-direction', getDirection() || null);\n        var iterationsCount = getIterations() === Infinity ? 'infinite' : getIterations().toString();\n        setStyleProperty(element, 'animation-iteration-count', iterationsCount);\n\n        if (toggleAnimationName) {\n          setStyleProperty(element, 'animation-name', \"\".concat(keyframeName, \"-alt\"));\n        }\n\n        raf(function () {\n          setStyleProperty(element, 'animation-name', keyframeName || null);\n        });\n      });\n    });\n  };\n\n  var update = function update() {\n    var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var toggleAnimationName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var step = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (deep) {\n      childAnimations.forEach(function (animation) {\n        animation.update(deep, toggleAnimationName, step);\n      });\n    }\n\n    if (supportsWebAnimations) {\n      updateWebAnimation(step);\n    } else {\n      updateCSSAnimation(toggleAnimationName, step);\n    }\n\n    return ani;\n  };\n\n  var progressStart = function progressStart() {\n    var forceLinearEasing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var step = arguments.length > 1 ? arguments[1] : undefined;\n    childAnimations.forEach(function (animation) {\n      animation.progressStart(forceLinearEasing, step);\n    });\n    pauseAnimation();\n    shouldForceLinearEasing = forceLinearEasing;\n\n    if (!initialized) {\n      initializeAnimation();\n    }\n\n    update(false, true, step);\n    return ani;\n  };\n\n  var progressStep = function progressStep(step) {\n    childAnimations.forEach(function (animation) {\n      animation.progressStep(step);\n    });\n    setAnimationStep(step);\n    return ani;\n  };\n\n  var progressEnd = function progressEnd(playTo, step, dur) {\n    shouldForceLinearEasing = false;\n    childAnimations.forEach(function (animation) {\n      animation.progressEnd(playTo, step, dur);\n    });\n\n    if (dur !== undefined) {\n      forceDurationValue = dur;\n    }\n\n    finished = false;\n    willComplete = true;\n\n    if (playTo === 0) {\n      forceDirectionValue = getDirection() === 'reverse' ? 'normal' : 'reverse';\n\n      if (forceDirectionValue === 'reverse') {\n        willComplete = false;\n      }\n\n      if (supportsWebAnimations) {\n        update();\n        setAnimationStep(1 - step);\n      } else {\n        forceDelayValue = (1 - step) * getDuration() * -1;\n        update(false, false);\n      }\n    } else if (playTo === 1) {\n      if (supportsWebAnimations) {\n        update();\n        setAnimationStep(step);\n      } else {\n        forceDelayValue = step * getDuration() * -1;\n        update(false, false);\n      }\n    }\n\n    if (playTo !== undefined) {\n      onFinish(function () {\n        forceDurationValue = undefined;\n        forceDirectionValue = undefined;\n        forceDelayValue = undefined;\n      }, {\n        oneTimeCallback: true\n      });\n\n      if (!parentAnimation) {\n        play();\n      }\n    }\n\n    return ani;\n  };\n\n  var pauseAnimation = function pauseAnimation() {\n    if (initialized) {\n      if (supportsWebAnimations) {\n        webAnimations.forEach(function (animation) {\n          animation.pause();\n        });\n      } else {\n        elements.forEach(function (element) {\n          setStyleProperty(element, 'animation-play-state', 'paused');\n        });\n      }\n\n      paused = true;\n    }\n  };\n\n  var pause = function pause() {\n    childAnimations.forEach(function (animation) {\n      animation.pause();\n    });\n    pauseAnimation();\n    return ani;\n  };\n\n  var onAnimationEndFallback = function onAnimationEndFallback() {\n    cssAnimationsTimerFallback = undefined;\n    animationFinish();\n  };\n\n  var clearCSSAnimationsTimeout = function clearCSSAnimationsTimeout() {\n    if (cssAnimationsTimerFallback) {\n      clearTimeout(cssAnimationsTimerFallback);\n    }\n  };\n\n  var playCSSAnimations = function playCSSAnimations() {\n    clearCSSAnimationsTimeout();\n    raf(function () {\n      elements.forEach(function (element) {\n        if (_keyframes.length > 0) {\n          setStyleProperty(element, 'animation-play-state', 'running');\n        }\n      });\n    });\n\n    if (_keyframes.length === 0 || elements.length === 0) {\n      animationFinish();\n    } else {\n      /**\n       * This is a catchall in the event that a CSS Animation did not finish.\n       * The Web Animations API has mechanisms in place for preventing this.\n       * CSS Animations will not fire an `animationend` event\n       * for elements with `display: none`. The Web Animations API\n       * accounts for this, but using raw CSS Animations requires\n       * this workaround.\n       */\n      var animationDelay = getDelay() || 0;\n      var animationDuration = getDuration() || 0;\n      var animationIterations = getIterations() || 1; // No need to set a timeout when animation has infinite iterations\n\n      if (isFinite(animationIterations)) {\n        cssAnimationsTimerFallback = setTimeout(onAnimationEndFallback, animationDelay + animationDuration * animationIterations + ANIMATION_END_FALLBACK_PADDING_MS);\n      }\n\n      animationEnd(elements[0], function () {\n        clearCSSAnimationsTimeout();\n        /**\n         * Ensure that clean up\n         * is always done a frame\n         * before the onFinish handlers\n         * are fired. Otherwise, there\n         * may be flickering if a new\n         * animation is started on the same\n         * element too quickly\n         *\n         * TODO: Is there a cleaner way to do this?\n         */\n\n        raf(function () {\n          clearCSSAnimationPlayState();\n          raf(animationFinish);\n        });\n      });\n    }\n  };\n\n  var clearCSSAnimationPlayState = function clearCSSAnimationPlayState() {\n    elements.forEach(function (element) {\n      removeStyleProperty(element, 'animation-duration');\n      removeStyleProperty(element, 'animation-delay');\n      removeStyleProperty(element, 'animation-play-state');\n    });\n  };\n\n  var playWebAnimations = function playWebAnimations() {\n    webAnimations.forEach(function (animation) {\n      animation.play();\n    });\n\n    if (_keyframes.length === 0 || elements.length === 0) {\n      animationFinish();\n    }\n  };\n\n  var resetAnimation = function resetAnimation() {\n    if (supportsWebAnimations) {\n      setAnimationStep(0);\n      updateWebAnimation();\n    } else {\n      updateCSSAnimation();\n    }\n  };\n\n  var play = function play(opts) {\n    return new Promise(function (resolve) {\n      if (opts === null || opts === void 0 ? void 0 : opts.sync) {\n        shouldForceSyncPlayback = true;\n        onFinish(function () {\n          return shouldForceSyncPlayback = false;\n        }, {\n          oneTimeCallback: true\n        });\n      }\n\n      if (!initialized) {\n        initializeAnimation();\n      }\n\n      if (finished) {\n        resetAnimation();\n        finished = false;\n      }\n\n      if (shouldCalculateNumAnimations) {\n        numAnimationsRunning = childAnimations.length + 1;\n        shouldCalculateNumAnimations = false;\n      }\n\n      onFinish(function () {\n        return resolve();\n      }, {\n        oneTimeCallback: true\n      });\n      childAnimations.forEach(function (animation) {\n        animation.play();\n      });\n\n      if (supportsWebAnimations) {\n        playWebAnimations();\n      } else {\n        playCSSAnimations();\n      }\n\n      paused = false;\n    });\n  };\n\n  var stop = function stop() {\n    childAnimations.forEach(function (animation) {\n      animation.stop();\n    });\n\n    if (initialized) {\n      cleanUpElements();\n      initialized = false;\n    }\n\n    resetFlags();\n  };\n\n  var from = function from(property, value) {\n    var firstFrame = _keyframes[0];\n\n    if (firstFrame !== undefined && (firstFrame.offset === undefined || firstFrame.offset === 0)) {\n      firstFrame[property] = value;\n    } else {\n      _keyframes = [_defineProperty({\n        offset: 0\n      }, property, value)].concat(_toConsumableArray(_keyframes));\n    }\n\n    return ani;\n  };\n\n  var to = function to(property, value) {\n    var lastFrame = _keyframes[_keyframes.length - 1];\n\n    if (lastFrame !== undefined && (lastFrame.offset === undefined || lastFrame.offset === 1)) {\n      lastFrame[property] = value;\n    } else {\n      _keyframes = [].concat(_toConsumableArray(_keyframes), [_defineProperty({\n        offset: 1\n      }, property, value)]);\n    }\n\n    return ani;\n  };\n\n  var fromTo = function fromTo(property, fromValue, toValue) {\n    return from(property, fromValue).to(property, toValue);\n  };\n\n  return ani = {\n    parentAnimation: parentAnimation,\n    elements: elements,\n    childAnimations: childAnimations,\n    id: id,\n    animationFinish: animationFinish,\n    from: from,\n    to: to,\n    fromTo: fromTo,\n    parent: parent,\n    play: play,\n    pause: pause,\n    stop: stop,\n    destroy: destroy,\n    keyframes: keyframes,\n    addAnimation: addAnimation,\n    addElement: addElement,\n    update: update,\n    fill: fill,\n    direction: direction,\n    iterations: iterations,\n    duration: duration,\n    easing: easing,\n    delay: delay,\n    getWebAnimations: getWebAnimations,\n    getKeyframes: getKeyframes,\n    getFill: getFill,\n    getDirection: getDirection,\n    getDelay: getDelay,\n    getIterations: getIterations,\n    getEasing: getEasing,\n    getDuration: getDuration,\n    afterAddRead: afterAddRead,\n    afterAddWrite: afterAddWrite,\n    afterClearStyles: afterClearStyles,\n    afterStyles: afterStyles,\n    afterRemoveClass: afterRemoveClass,\n    afterAddClass: afterAddClass,\n    beforeAddRead: beforeAddRead,\n    beforeAddWrite: beforeAddWrite,\n    beforeClearStyles: beforeClearStyles,\n    beforeStyles: beforeStyles,\n    beforeRemoveClass: beforeRemoveClass,\n    beforeAddClass: beforeAddClass,\n    onFinish: onFinish,\n    isRunning: isRunning,\n    progressStart: progressStart,\n    progressStep: progressStep,\n    progressEnd: progressEnd\n  };\n};\n\nexport { createAnimation as c };","map":null,"metadata":{},"sourceType":"module"}