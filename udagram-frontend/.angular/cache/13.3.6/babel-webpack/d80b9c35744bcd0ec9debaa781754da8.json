{"ast":null,"code":"import _defineProperty from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _toConsumableArray from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _asyncToGenerator from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, c as writeTask, h, H as Host, i as getElement } from './index-b3eecb14.js';\nimport { b as getIonMode, c as config } from './ionic-global-f1ce4d2d.js';\nimport { i as isIonContent, f as findIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-7cd5eefa.js';\nimport { C as CoreDelegate, a as attachComponent, d as detachComponent } from './framework-delegate-ce4f806c.js';\nimport { l as clamp, g as getElementRoot, r as raf } from './helpers-4d272360.js';\nimport { KEYBOARD_DID_OPEN } from './keyboard-4d5544a0.js';\nimport { p as printIonWarning } from './index-9ac92660.js';\nimport { B as BACKDROP, e as prepareOverlay, d as _present, h as activeAnimations, f as _dismiss, g as eventMethod } from './overlays-ff47fddd.js';\nimport { g as getClassMap } from './theme-7670341c.js';\nimport { e as deepReady } from './index-2b53f989.js';\nimport { c as createAnimation } from './animation-36c1d77d.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-c313947a.js';\nimport { createGesture } from './index-3f1a7d95.js';\nimport './hardware-back-button-490df115.js';\nimport './gesture-controller-17e82006.js';\n\nvar handleCanDismiss = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(el, animation) {\n    var shouldDismiss;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof el.canDismiss !== 'function')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return el.canDismiss();\n\n          case 4:\n            shouldDismiss = _context.sent;\n\n            if (shouldDismiss) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 7:\n            /**\n             * If canDismiss resolved after the snap\n             * back animation finished, we can\n             * dismiss immediately.\n             *\n             * If canDismiss resolved before the snap\n             * back animation finished, we need to\n             * wait until the snap back animation is\n             * done before dismissing.\n             */\n            if (animation.isRunning()) {\n              animation.onFinish(function () {\n                el.dismiss(undefined, 'handler');\n              }, {\n                oneTimeCallback: true\n              });\n            } else {\n              el.dismiss(undefined, 'handler');\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleCanDismiss(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * This function lets us simulate a realistic spring-like animation\n * when swiping down on the modal.\n * There are two forces that we need to use to compute the spring physics:\n *\n * 1. Stiffness, k: This is a measure of resistance applied a spring.\n * 2. Dampening, c: This value has the effect of reducing or preventing oscillation.\n *\n * Using these two values, we can calculate the Spring Force and the Dampening Force\n * to compute the total force applied to a spring.\n *\n * Spring Force: This force pulls a spring back into its equilibrium position.\n * Hooke's Law tells us that that spring force (FS) = kX.\n * k is the stiffness of a spring, and X is the displacement of the spring from its\n * equilibrium position. In this case, it is the amount by which the free end\n * of a spring was displaced (stretched/pushed) from its \"relaxed\" position.\n *\n * Dampening Force: This force slows down motion. Without it, a spring would oscillate forever.\n * The dampening force, FD, can be found via this formula: FD = -cv\n * where c the dampening value and v is velocity.\n *\n * Therefore, the resulting force that is exerted on the block is:\n * F = FS + FD = -kX - cv\n *\n * Newton's 2nd Law tells us that F = ma:\n * ma = -kX - cv.\n *\n * For Ionic's purposes, we can assume that m = 1:\n * a = -kX - cv\n *\n * Imagine a block attached to the end of a spring. At equilibrium\n * the block is at position x = 1.\n * Pressing on the block moves it to position x = 0;\n * So, to calculate the displacement, we need to take the\n * current position and subtract the previous position from it.\n * X = x - x0 = 0 - 1 = -1.\n *\n * For Ionic's purposes, we are only pushing on the spring modal\n * so we have a max position of 1.\n * As a result, we can expand displacement to this formula:\n * X = x - 1\n *\n * a = -k(x - 1) - cv\n *\n * We can represent the motion of something as a function of time: f(t) = x.\n * The derivative of position gives us the velocity: f'(t)\n * The derivative of the velocity gives us the acceleration: f''(t)\n *\n * We can substitute the formula above with these values:\n *\n * f\"(t) = -k * (f(t) - 1) - c * f'(t)\n *\n * This is called a differential equation.\n *\n * We know that at t = 0, we are at x = 0 because the modal does not move: f(0) = 0\n * This means our velocity is also zero: f'(0) = 0.\n *\n * We can cheat a bit and plug the formula into Wolfram Alpha.\n * However, we need to pick stiffness and dampening values:\n * k = 0.57\n * c = 15\n *\n * I picked these as they are fairly close to native iOS's spring effect\n * with the modal.\n *\n * What we plug in is this: f(0) = 0; f'(0) = 0; f''(t) = -0.57(f(t) - 1) - 15f'(t)\n *\n * The result is a formula that lets us calculate the acceleration\n * for a given time t.\n * Note: This is the approximate form of the solution. Wolfram Alpha will\n * give you a complex differential equation too.\n */\n\n\nvar calculateSpringStep = function calculateSpringStep(t) {\n  return 0.00255275 * Math.pow(2.71828, -14.9619 * t) - 1.00255 * Math.pow(2.71828, -0.0380968 * t) + 1;\n}; // Defaults for the card swipe animation\n\n\nvar SwipeToCloseDefaults = {\n  MIN_PRESENTING_SCALE: 0.93\n};\n\nvar createSwipeToCloseGesture = function createSwipeToCloseGesture(el, contentEl, scrollEl, animation, onDismiss) {\n  var height = el.offsetHeight;\n  var isOpen = false;\n  var canDismissBlocksGesture = false;\n  var canDismissMaxStep = 0.2;\n  var hasRefresherInContent = !!contentEl.querySelector('ion-refresher');\n\n  var getScrollY = function getScrollY() {\n    if (isIonContent(contentEl)) {\n      return contentEl.scrollY;\n      /**\n       * Custom scroll containers are intended to be\n       * used with virtual scrolling, so we assume\n       * there is scrolling in this case.\n       */\n    } else {\n      return true;\n    }\n  };\n\n  var initialScrollY = getScrollY();\n\n  var disableContentScroll = function disableContentScroll() {\n    if (isIonContent(contentEl)) {\n      contentEl.scrollY = false;\n    } else {\n      contentEl.style.setProperty('overflow', 'hidden');\n    }\n  };\n\n  var resetContentScroll = function resetContentScroll() {\n    if (isIonContent(contentEl)) {\n      contentEl.scrollY = initialScrollY;\n    } else {\n      contentEl.style.removeProperty('overflow');\n    }\n  };\n\n  var canStart = function canStart(detail) {\n    var target = detail.event.target;\n\n    if (target === null || !target.closest) {\n      return true;\n    }\n    /**\n     * If we are swiping on the content,\n     * swiping should only be possible if\n     * the content is scrolled all the way\n     * to the top so that we do not interfere\n     * with scrolling.\n     */\n\n\n    var content = target.closest('ion-content');\n\n    if (content) {\n      /**\n       * The card should never swipe to close\n       * on the content with a refresher.\n       * Note: We cannot solve this by making the\n       * swipeToClose gesture have a higher priority\n       * than the refresher gesture as the iOS native\n       * refresh gesture uses a scroll listener in\n       * addition to a gesture.\n       */\n      return !hasRefresherInContent && scrollEl.scrollTop === 0;\n    }\n    /**\n     * Card should be swipeable on all\n     * parts of the modal except for the footer.\n     */\n\n\n    var footer = target.closest('ion-footer');\n\n    if (footer === null) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var onStart = function onStart(detail) {\n    var deltaY = detail.deltaY;\n    /**\n     * If canDismiss is anything other than `true`\n     * then users should be able to swipe down\n     * until a threshold is hit. At that point,\n     * the card modal should not proceed any further.\n     * TODO (FW-937)\n     * Remove undefined check\n     */\n\n    canDismissBlocksGesture = el.canDismiss !== undefined && el.canDismiss !== true;\n    /**\n     * If we are pulling down, then\n     * it is possible we are pulling on the\n     * content. We do not want scrolling to\n     * happen at the same time as the gesture.\n     */\n\n    if (deltaY > 0) {\n      disableContentScroll();\n    }\n\n    animation.progressStart(true, isOpen ? 1 : 0);\n  };\n\n  var onMove = function onMove(detail) {\n    var deltaY = detail.deltaY;\n    /**\n     * If we are pulling down, then\n     * it is possible we are pulling on the\n     * content. We do not want scrolling to\n     * happen at the same time as the gesture.\n     */\n\n    if (deltaY > 0) {\n      disableContentScroll();\n    }\n    /**\n     * If we are swiping on the content\n     * then the swipe gesture should only\n     * happen if we are pulling down.\n     *\n     * However, if we pull up and\n     * then down such that the scroll position\n     * returns to 0, we should be able to swipe\n     * the card.\n     */\n\n\n    var step = detail.deltaY / height;\n    /**\n     * Check if user is swiping down and\n     * if we have a canDismiss value that\n     * should block the gesture from\n     * proceeding,\n     */\n\n    var isAttempingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;\n    /**\n     * If we are blocking the gesture from dismissing,\n     * set the max step value so that the sheet cannot be\n     * completely hidden.\n     */\n\n    var maxStep = isAttempingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    /**\n     * If we are blocking the gesture from\n     * dismissing, calculate the spring modifier value\n     * this will be added to the starting breakpoint\n     * value to give the gesture a spring-like feeling.\n     * Note that the starting breakpoint is always 0,\n     * so we omit adding 0 to the result.\n     */\n\n    var processedStep = isAttempingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;\n    var clampedStep = clamp(0.0001, processedStep, maxStep);\n    animation.progressStep(clampedStep);\n  };\n\n  var onEnd = function onEnd(detail) {\n    var velocity = detail.velocityY;\n    var step = detail.deltaY / height;\n    var isAttempingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;\n    var maxStep = isAttempingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    var processedStep = isAttempingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;\n    var clampedStep = clamp(0.0001, processedStep, maxStep);\n    var threshold = (detail.deltaY + velocity * 1000) / height;\n    /**\n     * If canDismiss blocks\n     * the swipe gesture, then the\n     * animation can never complete until\n     * canDismiss is checked.\n     */\n\n    var shouldComplete = !isAttempingDismissWithCanDismiss && threshold >= 0.5;\n    var newStepValue = shouldComplete ? -0.001 : 0.001;\n\n    if (!shouldComplete) {\n      animation.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n      newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], clampedStep)[0];\n    } else {\n      animation.easing('cubic-bezier(0.32, 0.72, 0, 1)');\n      newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], clampedStep)[0];\n    }\n\n    var duration = shouldComplete ? computeDuration(step * height, velocity) : computeDuration((1 - clampedStep) * height, velocity);\n    isOpen = shouldComplete;\n    gesture.enable(false);\n    resetContentScroll();\n    animation.onFinish(function () {\n      if (!shouldComplete) {\n        gesture.enable(true);\n      }\n    }).progressEnd(shouldComplete ? 1 : 0, newStepValue, duration);\n    /**\n     * If the canDismiss value blocked the gesture\n     * from proceeding, then we should ignore whatever\n     * shouldComplete is. Whether or not the modal\n     * animation should complete is now determined by\n     * canDismiss.\n     *\n     * If the user swiped >25% of the way\n     * to the max step, then we should\n     * check canDismiss. 25% was chosen\n     * to avoid accidental swipes.\n     */\n\n    if (isAttempingDismissWithCanDismiss && clampedStep > maxStep / 4) {\n      handleCanDismiss(el, animation);\n    } else if (shouldComplete) {\n      onDismiss();\n    }\n  };\n\n  var gesture = createGesture({\n    el: el,\n    gestureName: 'modalSwipeToClose',\n    gesturePriority: 40,\n    direction: 'y',\n    threshold: 10,\n    canStart: canStart,\n    onStart: onStart,\n    onMove: onMove,\n    onEnd: onEnd\n  });\n  return gesture;\n};\n\nvar computeDuration = function computeDuration(remaining, velocity) {\n  return clamp(400, remaining / Math.abs(velocity * 1.1), 500);\n};\n/**\n * Use y = mx + b to\n * figure out the backdrop value\n * at a particular x coordinate. This\n * is useful when the backdrop does\n * not begin to fade in until after\n * the 0 breakpoint.\n */\n\n\nvar getBackdropValueForSheet = function getBackdropValueForSheet(x, backdropBreakpoint) {\n  /**\n   * We will use these points:\n   * (backdropBreakpoint, 0)\n   * (maxBreakpoint, 1)\n   * We know that at the beginning breakpoint,\n   * the backdrop will be hidden. We also\n   * know that at the maxBreakpoint, the backdrop\n   * must be fully visible. maxBreakpoint should\n   * always be 1 even if the maximum value\n   * of the breakpoints array is not 1 since\n   * the animation runs from a progress of 0\n   * to a progress of 1.\n   * m = (y2 - y1) / (x2 - x1)\n   *\n   * This is simplified from:\n   * m = (1 - 0) / (maxBreakpoint - backdropBreakpoint)\n   */\n  var slope = 1 / (1 - backdropBreakpoint);\n  /**\n   * From here, compute b which is\n   * the backdrop opacity if the offset\n   * is 0. If the backdrop does not\n   * begin to fade in until after the\n   * 0 breakpoint, this b value will be\n   * negative. This is fine as we never pass\n   * b directly into the animation keyframes.\n   * b = y - mx\n   * Use a known point: (backdropBreakpoint, 0)\n   * This is simplified from:\n   * b = 0 - (backdropBreakpoint * slope)\n   */\n\n  var b = -(backdropBreakpoint * slope);\n  /**\n   * Finally, we can now determine the\n   * backdrop offset given an arbitrary\n   * gesture offset.\n   */\n\n  return x * slope + b;\n};\n\nvar createSheetEnterAnimation = function createSheetEnterAnimation(opts) {\n  var currentBreakpoint = opts.currentBreakpoint,\n      backdropBreakpoint = opts.backdropBreakpoint;\n  /**\n   * If the backdropBreakpoint is undefined, then the backdrop\n   * should always fade in. If the backdropBreakpoint came before the\n   * current breakpoint, then the backdrop should be fading in.\n   */\n\n  var shouldShowBackdrop = backdropBreakpoint === undefined || backdropBreakpoint < currentBreakpoint;\n  var initialBackdrop = shouldShowBackdrop ? \"calc(var(--backdrop-opacity) * \".concat(currentBreakpoint, \")\") : '0';\n  var backdropAnimation = createAnimation('backdropAnimation').fromTo('opacity', 0, initialBackdrop);\n\n  if (shouldShowBackdrop) {\n    backdropAnimation.beforeStyles({\n      'pointer-events': 'none'\n    }).afterClearStyles(['pointer-events']);\n  }\n\n  var wrapperAnimation = createAnimation('wrapperAnimation').keyframes([{\n    offset: 0,\n    opacity: 1,\n    transform: 'translateY(100%)'\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: \"translateY(\".concat(100 - currentBreakpoint * 100, \"%)\")\n  }]);\n  return {\n    wrapperAnimation: wrapperAnimation,\n    backdropAnimation: backdropAnimation\n  };\n};\n\nvar createSheetLeaveAnimation = function createSheetLeaveAnimation(opts) {\n  var currentBreakpoint = opts.currentBreakpoint,\n      backdropBreakpoint = opts.backdropBreakpoint;\n  /**\n   * Backdrop does not always fade in from 0 to 1 if backdropBreakpoint\n   * is defined, so we need to account for that offset by figuring out\n   * what the current backdrop value should be.\n   */\n\n  var backdropValue = \"calc(var(--backdrop-opacity) * \".concat(getBackdropValueForSheet(currentBreakpoint, backdropBreakpoint), \")\");\n  var defaultBackdrop = [{\n    offset: 0,\n    opacity: backdropValue\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  var customBackdrop = [{\n    offset: 0,\n    opacity: backdropValue\n  }, {\n    offset: backdropBreakpoint,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  var backdropAnimation = createAnimation('backdropAnimation').keyframes(backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop);\n  var wrapperAnimation = createAnimation('wrapperAnimation').keyframes([{\n    offset: 0,\n    opacity: 1,\n    transform: \"translateY(\".concat(100 - currentBreakpoint * 100, \"%)\")\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: \"translateY(100%)\"\n  }]);\n  return {\n    wrapperAnimation: wrapperAnimation,\n    backdropAnimation: backdropAnimation\n  };\n};\n\nvar createEnterAnimation$1 = function createEnterAnimation$1() {\n  var backdropAnimation = createAnimation().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({\n    'pointer-events': 'none'\n  }).afterClearStyles(['pointer-events']);\n  var wrapperAnimation = createAnimation().fromTo('transform', 'translateY(100vh)', 'translateY(0vh)');\n  return {\n    backdropAnimation: backdropAnimation,\n    wrapperAnimation: wrapperAnimation\n  };\n};\n/**\n * iOS Modal Enter Animation for the Card presentation style\n */\n\n\nvar iosEnterAnimation = function iosEnterAnimation(baseEl, opts) {\n  var presentingEl = opts.presentingEl,\n      currentBreakpoint = opts.currentBreakpoint;\n  var root = getElementRoot(baseEl);\n\n  var _ref2 = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation$1(),\n      wrapperAnimation = _ref2.wrapperAnimation,\n      backdropAnimation = _ref2.backdropAnimation;\n\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({\n    opacity: 1\n  });\n  var baseAnimation = createAnimation('entering-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(500).addAnimation(wrapperAnimation);\n\n  if (presentingEl) {\n    var isMobile = window.innerWidth < 768;\n    var hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;\n    var presentingElRoot = getElementRoot(presentingEl);\n    var presentingAnimation = createAnimation().beforeStyles({\n      transform: 'translateY(0)',\n      'transform-origin': 'top center',\n      overflow: 'hidden'\n    });\n    var bodyEl = document.body;\n\n    if (isMobile) {\n      /**\n       * Fallback for browsers that does not support `max()` (ex: Firefox)\n       * No need to worry about statusbar padding since engines like Gecko\n       * are not used as the engine for standalone Cordova/Capacitor apps\n       */\n      var transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';\n      var modalTransform = hasCardModal ? '-10px' : transformOffset;\n      var toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n      var finalTransform = \"translateY(\".concat(modalTransform, \") scale(\").concat(toPresentingScale, \")\");\n      presentingAnimation.afterStyles({\n        transform: finalTransform\n      }).beforeAddWrite(function () {\n        return bodyEl.style.setProperty('background-color', 'black');\n      }).addElement(presentingEl).keyframes([{\n        offset: 0,\n        filter: 'contrast(1)',\n        transform: 'translateY(0px) scale(1)',\n        borderRadius: '0px'\n      }, {\n        offset: 1,\n        filter: 'contrast(0.85)',\n        transform: finalTransform,\n        borderRadius: '10px 10px 0 0'\n      }]);\n      baseAnimation.addAnimation(presentingAnimation);\n    } else {\n      baseAnimation.addAnimation(backdropAnimation);\n\n      if (!hasCardModal) {\n        wrapperAnimation.fromTo('opacity', '0', '1');\n      } else {\n        var _toPresentingScale = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;\n\n        var _finalTransform = \"translateY(-10px) scale(\".concat(_toPresentingScale, \")\");\n\n        presentingAnimation.afterStyles({\n          transform: _finalTransform\n        }).addElement(presentingElRoot.querySelector('.modal-wrapper')).keyframes([{\n          offset: 0,\n          filter: 'contrast(1)',\n          transform: 'translateY(0) scale(1)'\n        }, {\n          offset: 1,\n          filter: 'contrast(0.85)',\n          transform: _finalTransform\n        }]);\n        var shadowAnimation = createAnimation().afterStyles({\n          transform: _finalTransform\n        }).addElement(presentingElRoot.querySelector('.modal-shadow')).keyframes([{\n          offset: 0,\n          opacity: '1',\n          transform: 'translateY(0) scale(1)'\n        }, {\n          offset: 1,\n          opacity: '0',\n          transform: _finalTransform\n        }]);\n        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n      }\n    }\n  } else {\n    baseAnimation.addAnimation(backdropAnimation);\n  }\n\n  return baseAnimation;\n};\n\nvar createLeaveAnimation$1 = function createLeaveAnimation$1() {\n  var backdropAnimation = createAnimation().fromTo('opacity', 'var(--backdrop-opacity)', 0);\n  var wrapperAnimation = createAnimation().fromTo('transform', 'translateY(0vh)', 'translateY(100vh)');\n  return {\n    backdropAnimation: backdropAnimation,\n    wrapperAnimation: wrapperAnimation\n  };\n};\n/**\n * iOS Modal Leave Animation\n */\n\n\nvar iosLeaveAnimation = function iosLeaveAnimation(baseEl, opts) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;\n  var presentingEl = opts.presentingEl,\n      currentBreakpoint = opts.currentBreakpoint;\n  var root = getElementRoot(baseEl);\n\n  var _ref3 = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation$1(),\n      wrapperAnimation = _ref3.wrapperAnimation,\n      backdropAnimation = _ref3.backdropAnimation;\n\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({\n    opacity: 1\n  });\n  var baseAnimation = createAnimation('leaving-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(duration).addAnimation(wrapperAnimation);\n\n  if (presentingEl) {\n    var isMobile = window.innerWidth < 768;\n    var hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;\n    var presentingElRoot = getElementRoot(presentingEl);\n    var presentingAnimation = createAnimation().beforeClearStyles(['transform']).afterClearStyles(['transform']).onFinish(function (currentStep) {\n      // only reset background color if this is the last card-style modal\n      if (currentStep !== 1) {\n        return;\n      }\n\n      presentingEl.style.setProperty('overflow', '');\n      var numModals = Array.from(bodyEl.querySelectorAll('ion-modal')).filter(function (m) {\n        return m.presentingElement !== undefined;\n      }).length;\n\n      if (numModals <= 1) {\n        bodyEl.style.setProperty('background-color', '');\n      }\n    });\n    var bodyEl = document.body;\n\n    if (isMobile) {\n      var transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';\n      var modalTransform = hasCardModal ? '-10px' : transformOffset;\n      var toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n      var finalTransform = \"translateY(\".concat(modalTransform, \") scale(\").concat(toPresentingScale, \")\");\n      presentingAnimation.addElement(presentingEl).keyframes([{\n        offset: 0,\n        filter: 'contrast(0.85)',\n        transform: finalTransform,\n        borderRadius: '10px 10px 0 0'\n      }, {\n        offset: 1,\n        filter: 'contrast(1)',\n        transform: 'translateY(0px) scale(1)',\n        borderRadius: '0px'\n      }]);\n      baseAnimation.addAnimation(presentingAnimation);\n    } else {\n      baseAnimation.addAnimation(backdropAnimation);\n\n      if (!hasCardModal) {\n        wrapperAnimation.fromTo('opacity', '1', '0');\n      } else {\n        var _toPresentingScale2 = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;\n\n        var _finalTransform2 = \"translateY(-10px) scale(\".concat(_toPresentingScale2, \")\");\n\n        presentingAnimation.addElement(presentingElRoot.querySelector('.modal-wrapper')).afterStyles({\n          transform: 'translate3d(0, 0, 0)'\n        }).keyframes([{\n          offset: 0,\n          filter: 'contrast(0.85)',\n          transform: _finalTransform2\n        }, {\n          offset: 1,\n          filter: 'contrast(1)',\n          transform: 'translateY(0) scale(1)'\n        }]);\n        var shadowAnimation = createAnimation().addElement(presentingElRoot.querySelector('.modal-shadow')).afterStyles({\n          transform: 'translateY(0) scale(1)'\n        }).keyframes([{\n          offset: 0,\n          opacity: '0',\n          transform: _finalTransform2\n        }, {\n          offset: 1,\n          opacity: '1',\n          transform: 'translateY(0) scale(1)'\n        }]);\n        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n      }\n    }\n  } else {\n    baseAnimation.addAnimation(backdropAnimation);\n  }\n\n  return baseAnimation;\n};\n\nvar createEnterAnimation = function createEnterAnimation() {\n  var backdropAnimation = createAnimation().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({\n    'pointer-events': 'none'\n  }).afterClearStyles(['pointer-events']);\n  var wrapperAnimation = createAnimation().keyframes([{\n    offset: 0,\n    opacity: 0.01,\n    transform: 'translateY(40px)'\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: \"translateY(0px)\"\n  }]);\n  return {\n    backdropAnimation: backdropAnimation,\n    wrapperAnimation: wrapperAnimation\n  };\n};\n/**\n * Md Modal Enter Animation\n */\n\n\nvar mdEnterAnimation = function mdEnterAnimation(baseEl, opts) {\n  var currentBreakpoint = opts.currentBreakpoint;\n  var root = getElementRoot(baseEl);\n\n  var _ref4 = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation(),\n      wrapperAnimation = _ref4.wrapperAnimation,\n      backdropAnimation = _ref4.backdropAnimation;\n\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));\n  return createAnimation().addElement(baseEl).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(280).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n\nvar createLeaveAnimation = function createLeaveAnimation() {\n  var backdropAnimation = createAnimation().fromTo('opacity', 'var(--backdrop-opacity)', 0);\n  var wrapperAnimation = createAnimation().keyframes([{\n    offset: 0,\n    opacity: 0.99,\n    transform: \"translateY(0px)\"\n  }, {\n    offset: 1,\n    opacity: 0,\n    transform: 'translateY(40px)'\n  }]);\n  return {\n    backdropAnimation: backdropAnimation,\n    wrapperAnimation: wrapperAnimation\n  };\n};\n/**\n * Md Modal Leave Animation\n */\n\n\nvar mdLeaveAnimation = function mdLeaveAnimation(baseEl, opts) {\n  var currentBreakpoint = opts.currentBreakpoint;\n  var root = getElementRoot(baseEl);\n\n  var _ref5 = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation(),\n      wrapperAnimation = _ref5.wrapperAnimation,\n      backdropAnimation = _ref5.backdropAnimation;\n\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));\n  return createAnimation().easing('cubic-bezier(0.47,0,0.745,0.715)').duration(200).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n\nvar createSheetGesture = function createSheetGesture(baseEl, backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, animation) {\n  var breakpoints = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  var getCurrentBreakpoint = arguments.length > 7 ? arguments[7] : undefined;\n  var onDismiss = arguments.length > 8 ? arguments[8] : undefined;\n  var onBreakpointChange = arguments.length > 9 ? arguments[9] : undefined;\n  // Defaults for the sheet swipe animation\n  var defaultBackdrop = [{\n    offset: 0,\n    opacity: 'var(--backdrop-opacity)'\n  }, {\n    offset: 1,\n    opacity: 0.01\n  }];\n  var customBackdrop = [{\n    offset: 0,\n    opacity: 'var(--backdrop-opacity)'\n  }, {\n    offset: 1 - backdropBreakpoint,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  var SheetDefaults = {\n    WRAPPER_KEYFRAMES: [{\n      offset: 0,\n      transform: 'translateY(0%)'\n    }, {\n      offset: 1,\n      transform: 'translateY(100%)'\n    }],\n    BACKDROP_KEYFRAMES: backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop\n  };\n  var contentEl = baseEl.querySelector('ion-content');\n  var height = wrapperEl.clientHeight;\n  var currentBreakpoint = initialBreakpoint;\n  var offset = 0;\n  var canDismissBlocksGesture = false;\n  var canDismissMaxStep = 0.95;\n  var wrapperAnimation = animation.childAnimations.find(function (ani) {\n    return ani.id === 'wrapperAnimation';\n  });\n  var backdropAnimation = animation.childAnimations.find(function (ani) {\n    return ani.id === 'backdropAnimation';\n  });\n  var maxBreakpoint = breakpoints[breakpoints.length - 1];\n  var minBreakpoint = breakpoints[0];\n\n  var enableBackdrop = function enableBackdrop() {\n    baseEl.style.setProperty('pointer-events', 'auto');\n    backdropEl.style.setProperty('pointer-events', 'auto');\n    /**\n     * When the backdrop is enabled, elements such\n     * as inputs should not be focusable outside\n     * the sheet.\n     */\n\n    baseEl.classList.remove('ion-disable-focus-trap');\n  };\n\n  var disableBackdrop = function disableBackdrop() {\n    baseEl.style.setProperty('pointer-events', 'none');\n    backdropEl.style.setProperty('pointer-events', 'none');\n    /**\n     * When the backdrop is enabled, elements such\n     * as inputs should not be focusable outside\n     * the sheet.\n     * Adding this class disables focus trapping\n     * for the sheet temporarily.\n     */\n\n    baseEl.classList.add('ion-disable-focus-trap');\n  };\n  /**\n   * After the entering animation completes,\n   * we need to set the animation to go from\n   * offset 0 to offset 1 so that users can\n   * swipe in any direction. We then set the\n   * animation offset to the current breakpoint\n   * so there is no flickering.\n   */\n\n\n  if (wrapperAnimation && backdropAnimation) {\n    wrapperAnimation.keyframes(_toConsumableArray(SheetDefaults.WRAPPER_KEYFRAMES));\n    backdropAnimation.keyframes(_toConsumableArray(SheetDefaults.BACKDROP_KEYFRAMES));\n    animation.progressStart(true, 1 - currentBreakpoint);\n    /**\n     * If backdrop is not enabled, then content\n     * behind modal should be clickable. To do this, we need\n     * to remove pointer-events from ion-modal as a whole.\n     * ion-backdrop and .modal-wrapper always have pointer-events: auto\n     * applied, so the modal content can still be interacted with.\n     */\n\n    var shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;\n\n    if (shouldEnableBackdrop) {\n      enableBackdrop();\n    } else {\n      disableBackdrop();\n    }\n  }\n\n  if (contentEl && currentBreakpoint !== maxBreakpoint) {\n    contentEl.scrollY = false;\n  }\n\n  var canStart = function canStart(detail) {\n    /**\n     * If the sheet is fully expanded and\n     * the user is swiping on the content,\n     * the gesture should not start to\n     * allow for scrolling on the content.\n     */\n    var content = detail.event.target.closest('ion-content');\n    currentBreakpoint = getCurrentBreakpoint();\n\n    if (currentBreakpoint === 1 && content) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var onStart = function onStart() {\n    /**\n     * If canDismiss is anything other than `true`\n     * then users should be able to swipe down\n     * until a threshold is hit. At that point,\n     * the card modal should not proceed any further.\n     *\n     * canDismiss is never fired via gesture if there is\n     * no 0 breakpoint. However, it can be fired if the user\n     * presses Esc or the hardware back button.\n     * TODO (FW-937)\n     * Remove undefined check\n     */\n    canDismissBlocksGesture = baseEl.canDismiss !== undefined && baseEl.canDismiss !== true && minBreakpoint === 0;\n    /**\n     * If swiping on the content\n     * we should disable scrolling otherwise\n     * the sheet will expand and the content will scroll.\n     */\n\n    if (contentEl) {\n      contentEl.scrollY = false;\n    }\n\n    raf(function () {\n      /**\n       * Dismisses the open keyboard when the sheet drag gesture is started.\n       * Sets the focus onto the modal element.\n       */\n      baseEl.focus();\n    });\n    animation.progressStart(true, 1 - currentBreakpoint);\n  };\n\n  var onMove = function onMove(detail) {\n    /**\n     * Given the change in gesture position on the Y axis,\n     * compute where the offset of the animation should be\n     * relative to where the user dragged.\n     */\n    var initialStep = 1 - currentBreakpoint;\n    var secondToLastBreakpoint = breakpoints.length > 1 ? 1 - breakpoints[1] : undefined;\n    var step = initialStep + detail.deltaY / height;\n    var isAttemptingDismissWithCanDismiss = secondToLastBreakpoint !== undefined && step >= secondToLastBreakpoint && canDismissBlocksGesture;\n    /**\n     * If we are blocking the gesture from dismissing,\n     * set the max step value so that the sheet cannot be\n     * completely hidden.\n     */\n\n    var maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    /**\n     * If we are blocking the gesture from\n     * dismissing, calculate the spring modifier value\n     * this will be added to the starting breakpoint\n     * value to give the gesture a spring-like feeling.\n     * Note that when isAttemptingDismissWithCanDismiss is true,\n     * the modifier is always added to the breakpoint that\n     * appears right after the 0 breakpoint.\n     *\n     * Note that this modifier is essentially the progression\n     * between secondToLastBreakpoint and maxStep which is\n     * why we subtract secondToLastBreakpoint. This lets us get\n     * the result as a value from 0 to 1.\n     */\n\n    var processedStep = isAttemptingDismissWithCanDismiss && secondToLastBreakpoint !== undefined ? secondToLastBreakpoint + calculateSpringStep((step - secondToLastBreakpoint) / (maxStep - secondToLastBreakpoint)) : step;\n    offset = clamp(0.0001, processedStep, maxStep);\n    animation.progressStep(offset);\n  };\n\n  var onEnd = function onEnd(detail) {\n    /**\n     * When the gesture releases, we need to determine\n     * the closest breakpoint to snap to.\n     */\n    var velocity = detail.velocityY;\n    var threshold = (detail.deltaY + velocity * 100) / height;\n    var diff = currentBreakpoint - threshold;\n    var closest = breakpoints.reduce(function (a, b) {\n      return Math.abs(b - diff) < Math.abs(a - diff) ? b : a;\n    });\n    moveSheetToBreakpoint({\n      breakpoint: closest,\n      breakpointOffset: offset,\n      canDismiss: canDismissBlocksGesture\n    });\n  };\n\n  var moveSheetToBreakpoint = function moveSheetToBreakpoint(options) {\n    var breakpoint = options.breakpoint,\n        canDismiss = options.canDismiss,\n        breakpointOffset = options.breakpointOffset;\n    /**\n     * canDismiss should only prevent snapping\n     * when users are trying to dismiss. If canDismiss\n     * is present but the user is trying to swipe upwards,\n     * we should allow that to happen,\n     */\n\n    var shouldPreventDismiss = canDismiss && breakpoint === 0;\n    var snapToBreakpoint = shouldPreventDismiss ? currentBreakpoint : breakpoint;\n    var shouldRemainOpen = snapToBreakpoint !== 0;\n    currentBreakpoint = 0;\n    /**\n     * Update the animation so that it plays from\n     * the last offset to the closest snap point.\n     */\n\n    if (wrapperAnimation && backdropAnimation) {\n      wrapperAnimation.keyframes([{\n        offset: 0,\n        transform: \"translateY(\".concat(breakpointOffset * 100, \"%)\")\n      }, {\n        offset: 1,\n        transform: \"translateY(\".concat((1 - snapToBreakpoint) * 100, \"%)\")\n      }]);\n      backdropAnimation.keyframes([{\n        offset: 0,\n        opacity: \"calc(var(--backdrop-opacity) * \".concat(getBackdropValueForSheet(1 - breakpointOffset, backdropBreakpoint), \")\")\n      }, {\n        offset: 1,\n        opacity: \"calc(var(--backdrop-opacity) * \".concat(getBackdropValueForSheet(snapToBreakpoint, backdropBreakpoint), \")\")\n      }]);\n      animation.progressStep(0);\n    }\n    /**\n     * Gesture should remain disabled until the\n     * snapping animation completes.\n     */\n\n\n    gesture.enable(false);\n    animation.onFinish(function () {\n      if (shouldRemainOpen) {\n        /**\n         * Once the snapping animation completes,\n         * we need to reset the animation to go\n         * from 0 to 1 so users can swipe in any direction.\n         * We then set the animation offset to the current\n         * breakpoint so that it starts at the snapped position.\n         */\n        if (wrapperAnimation && backdropAnimation) {\n          raf(function () {\n            wrapperAnimation.keyframes(_toConsumableArray(SheetDefaults.WRAPPER_KEYFRAMES));\n            backdropAnimation.keyframes(_toConsumableArray(SheetDefaults.BACKDROP_KEYFRAMES));\n            animation.progressStart(true, 1 - snapToBreakpoint);\n            currentBreakpoint = snapToBreakpoint;\n            onBreakpointChange(currentBreakpoint);\n            /**\n             * If the sheet is fully expanded, we can safely\n             * enable scrolling again.\n             */\n\n            if (contentEl && currentBreakpoint === breakpoints[breakpoints.length - 1]) {\n              contentEl.scrollY = true;\n            }\n            /**\n             * Backdrop should become enabled\n             * after the backdropBreakpoint value\n             */\n\n\n            var shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;\n\n            if (shouldEnableBackdrop) {\n              enableBackdrop();\n            } else {\n              disableBackdrop();\n            }\n\n            gesture.enable(true);\n          });\n        } else {\n          gesture.enable(true);\n        }\n      }\n      /**\n       * This must be a one time callback\n       * otherwise a new callback will\n       * be added every time onEnd runs.\n       */\n\n    }, {\n      oneTimeCallback: true\n    }).progressEnd(1, 0, 500);\n\n    if (shouldPreventDismiss) {\n      handleCanDismiss(baseEl, animation);\n    } else if (!shouldRemainOpen) {\n      onDismiss();\n    }\n  };\n\n  var gesture = createGesture({\n    el: wrapperEl,\n    gestureName: 'modalSheet',\n    gesturePriority: 40,\n    direction: 'y',\n    threshold: 10,\n    canStart: canStart,\n    onStart: onStart,\n    onMove: onMove,\n    onEnd: onEnd\n  });\n  return {\n    gesture: gesture,\n    moveSheetToBreakpoint: moveSheetToBreakpoint\n  };\n};\n\nvar modalIosCss = \":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;margin-left:auto;margin-right:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);background:var(--ion-color-step-350, #c0c0be);z-index:11}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.4)}:host(.modal-card),:host(.modal-sheet){--border-radius:10px}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:10px}}.modal-wrapper{-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0)}@media screen and (max-width: 767px){@supports (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - max(30px, var(--ion-safe-area-top)) - 10px)}}@supports not (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - 40px)}}:host(.modal-card) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-card) .modal-wrapper,:host-context([dir=rtl]).modal-card .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host(.modal-card){--backdrop-opacity:0;--width:100%;-ms-flex-align:end;align-items:flex-end}:host(.modal-card) .modal-shadow{display:none}:host(.modal-card) ion-backdrop{pointer-events:none}}@media screen and (min-width: 768px){:host(.modal-card){--width:calc(100% - 120px);--height:calc(100% - (120px + var(--ion-safe-area-top) + var(--ion-safe-area-bottom)));--max-width:720px;--max-height:1000px;--backdrop-opacity:0;--box-shadow:0px 0px 30px 10px rgba(0, 0, 0, 0.1);-webkit-transition:all 0.5s ease-in-out;transition:all 0.5s ease-in-out}:host(.modal-card) .modal-wrapper{-webkit-box-shadow:none;box-shadow:none}:host(.modal-card) .modal-shadow{-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow)}}:host(.modal-sheet) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-sheet) .modal-wrapper,:host-context([dir=rtl]).modal-sheet .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}\";\nvar modalMdCss = \":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;margin-left:auto;margin-right:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);background:var(--ion-color-step-350, #c0c0be);z-index:11}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.32)}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:2px;--box-shadow:0 28px 48px rgba(0, 0, 0, 0.4)}}.modal-wrapper{-webkit-transform:translate3d(0,  40px,  0);transform:translate3d(0,  40px,  0);opacity:0.01}\";\n\nvar Modal = /*#__PURE__*/function () {\n  function Modal(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Modal);\n\n    registerInstance(this, hostRef);\n    this.didPresent = createEvent(this, \"ionModalDidPresent\", 7);\n    this.willPresent = createEvent(this, \"ionModalWillPresent\", 7);\n    this.willDismiss = createEvent(this, \"ionModalWillDismiss\", 7);\n    this.didDismiss = createEvent(this, \"ionModalDidDismiss\", 7);\n    this.ionBreakpointDidChange = createEvent(this, \"ionBreakpointDidChange\", 7);\n    this.didPresentShorthand = createEvent(this, \"didPresent\", 7);\n    this.willPresentShorthand = createEvent(this, \"willPresent\", 7);\n    this.willDismissShorthand = createEvent(this, \"willDismiss\", 7);\n    this.didDismissShorthand = createEvent(this, \"didDismiss\", 7);\n    this.modalIndex = modalIds++;\n    this.coreDelegate = CoreDelegate();\n    this.isSheetModal = false;\n    this.inline = false; // Whether or not modal is being dismissed via gesture\n\n    this.gestureAnimationDismissing = false;\n    this.presented = false;\n    /** @internal */\n\n    this.hasController = false;\n    /**\n     * If `true`, the keyboard will be automatically dismissed when the overlay is presented.\n     */\n\n    this.keyboardClose = true;\n    /**\n     * A decimal value between 0 and 1 that indicates the\n     * point after which the backdrop will begin to fade in\n     * when using a sheet modal. Prior to this point, the\n     * backdrop will be hidden and the content underneath\n     * the sheet can be interacted with. This value is exclusive\n     * meaning the backdrop will become active after the value\n     * specified.\n     */\n\n    this.backdropBreakpoint = 0;\n    /**\n     * If `true`, the modal will be dismissed when the backdrop is clicked.\n     */\n\n    this.backdropDismiss = true;\n    /**\n     * If `true`, a backdrop will be displayed behind the modal.\n     */\n\n    this.showBackdrop = true;\n    /**\n     * If `true`, the modal will animate.\n     */\n\n    this.animated = true;\n    /**\n     * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.\n     * @deprecated - To prevent modals from dismissing, use canDismiss instead.\n     */\n\n    this.swipeToClose = false;\n    /**\n     * If `true`, the modal will open. If `false`, the modal will close.\n     * Use this if you need finer grained control over presentation, otherwise\n     * just use the modalController or the `trigger` property.\n     * Note: `isOpen` will not automatically be set back to `false` when\n     * the modal dismisses. You will need to do that in your code.\n     */\n\n    this.isOpen = false;\n\n    this.configureTriggerInteraction = function () {\n      var trigger = _this.trigger,\n          el = _this.el,\n          destroyTriggerInteraction = _this.destroyTriggerInteraction;\n\n      if (destroyTriggerInteraction) {\n        destroyTriggerInteraction();\n      }\n\n      var triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;\n\n      if (!triggerEl) {\n        return;\n      }\n\n      var configureTriggerInteraction = function configureTriggerInteraction(trigEl, modalEl) {\n        var openModal = function openModal() {\n          modalEl.present();\n        };\n\n        trigEl.addEventListener('click', openModal);\n        return function () {\n          trigEl.removeEventListener('click', openModal);\n        };\n      };\n\n      _this.destroyTriggerInteraction = configureTriggerInteraction(triggerEl, el);\n    };\n\n    this.onBackdropTap = function () {\n      _this.dismiss(undefined, BACKDROP);\n    };\n\n    this.onLifecycle = function (modalEvent) {\n      var el = _this.usersElement;\n      var name = LIFECYCLE_MAP[modalEvent.type];\n\n      if (el && name) {\n        var ev = new CustomEvent(name, {\n          bubbles: false,\n          cancelable: false,\n          detail: modalEvent.detail\n        });\n        el.dispatchEvent(ev);\n      }\n    };\n  }\n\n  _createClass(Modal, [{\n    key: \"onIsOpenChange\",\n    value: function onIsOpenChange(newValue, oldValue) {\n      if (newValue === true && oldValue === false) {\n        this.present();\n      } else if (newValue === false && oldValue === true) {\n        this.dismiss();\n      }\n    }\n  }, {\n    key: \"onTriggerChange\",\n    value: function onTriggerChange() {\n      this.configureTriggerInteraction();\n    }\n  }, {\n    key: \"swipeToCloseChanged\",\n    value: function () {\n      var _swipeToCloseChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(enable) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.gesture) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                this.gesture.enable(enable);\n                _context2.next = 7;\n                break;\n\n              case 4:\n                if (!enable) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.initSwipeToClose();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function swipeToCloseChanged(_x3) {\n        return _swipeToCloseChanged.apply(this, arguments);\n      }\n\n      return swipeToCloseChanged;\n    }()\n  }, {\n    key: \"breakpointsChanged\",\n    value: function breakpointsChanged(breakpoints) {\n      if (breakpoints !== undefined) {\n        this.sortedBreakpoints = breakpoints.sort(function (a, b) {\n          return a - b;\n        });\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      prepareOverlay(this.el);\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      var breakpoints = this.breakpoints,\n          initialBreakpoint = this.initialBreakpoint,\n          swipeToClose = this.swipeToClose;\n      /**\n       * If user has custom ID set then we should\n       * not assign the default incrementing ID.\n       */\n\n      this.modalId = this.el.hasAttribute('id') ? this.el.getAttribute('id') : \"ion-modal-\".concat(this.modalIndex);\n      var isSheetModal = this.isSheetModal = breakpoints !== undefined && initialBreakpoint !== undefined;\n\n      if (isSheetModal) {\n        this.currentBreakpoint = this.initialBreakpoint;\n      }\n\n      if (breakpoints !== undefined && initialBreakpoint !== undefined && !breakpoints.includes(initialBreakpoint)) {\n        printIonWarning('Your breakpoints array must include the initialBreakpoint value.');\n      }\n\n      if (swipeToClose) {\n        printIonWarning('swipeToClose has been deprecated in favor of canDismiss.\\n\\nIf you want a card modal to be swipeable, set canDismiss to `true`. In the next major release of Ionic, swipeToClose will be removed, and all card modals will be swipeable by default.');\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      /**\n       * If modal was rendered with isOpen=\"true\"\n       * then we should open modal immediately.\n       */\n      if (this.isOpen === true) {\n        raf(function () {\n          return _this2.present();\n        });\n      }\n\n      this.breakpointsChanged(this.breakpoints);\n      this.configureTriggerInteraction();\n    }\n    /**\n     * Determines whether or not an overlay\n     * is being used inline or via a controller/JS\n     * and returns the correct delegate.\n     * By default, subsequent calls to getDelegate\n     * will use a cached version of the delegate.\n     * This is useful for calling dismiss after\n     * present so that the correct delegate is given.\n     */\n\n  }, {\n    key: \"getDelegate\",\n    value: function getDelegate() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.workingDelegate && !force) {\n        return {\n          delegate: this.workingDelegate,\n          inline: this.inline\n        };\n      }\n      /**\n       * If using overlay inline\n       * we potentially need to use the coreDelegate\n       * so that this works in vanilla JS apps.\n       * If a developer has presented this component\n       * via a controller, then we can assume\n       * the component is already in the\n       * correct place.\n       */\n\n\n      var parentEl = this.el.parentNode;\n      var inline = this.inline = parentEl !== null && !this.hasController;\n      var delegate = this.workingDelegate = inline ? this.delegate || this.coreDelegate : this.delegate;\n      return {\n        inline: inline,\n        delegate: delegate\n      };\n    }\n    /**\n     * Determines whether or not the\n     * modal is allowed to dismiss based\n     * on the state of the canDismiss prop.\n     */\n\n  }, {\n    key: \"checkCanDismiss\",\n    value: function () {\n      var _checkCanDismiss = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var canDismiss;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                canDismiss = this.canDismiss;\n                /**\n                 * TODO (FW-937) - Remove the following check in\n                 * the next major release of Ionic.\n                 */\n\n                if (!(canDismiss === undefined)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", true);\n\n              case 3:\n                if (!(typeof canDismiss === 'function')) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", canDismiss());\n\n              case 5:\n                return _context3.abrupt(\"return\", canDismiss);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function checkCanDismiss() {\n        return _checkCanDismiss.apply(this, arguments);\n      }\n\n      return checkCanDismiss;\n    }()\n    /**\n     * Present the modal overlay after it has been created.\n     */\n\n  }, {\n    key: \"present\",\n    value: function () {\n      var _present2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this3 = this;\n\n        var data, _this$getDelegate, inline, delegate;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.presented) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                if (!(this.currentTransition !== undefined)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                _context4.next = 5;\n                return this.currentTransition;\n\n              case 5:\n                /**\n                 * If the modal is presented multiple times (inline modals), we\n                 * need to reset the current breakpoint to the initial breakpoint.\n                 */\n                this.currentBreakpoint = this.initialBreakpoint;\n                data = Object.assign(Object.assign({}, this.componentProps), {\n                  modal: this.el\n                });\n                _this$getDelegate = this.getDelegate(true), inline = _this$getDelegate.inline, delegate = _this$getDelegate.delegate;\n                _context4.next = 10;\n                return attachComponent(delegate, this.el, this.component, ['ion-page'], data, inline);\n\n              case 10:\n                this.usersElement = _context4.sent;\n                _context4.next = 13;\n                return deepReady(this.usersElement);\n\n              case 13:\n                writeTask(function () {\n                  return _this3.el.classList.add('show-modal');\n                });\n                this.currentTransition = _present(this, 'modalEnter', iosEnterAnimation, mdEnterAnimation, {\n                  presentingEl: this.presentingElement,\n                  currentBreakpoint: this.initialBreakpoint,\n                  backdropBreakpoint: this.backdropBreakpoint\n                });\n                _context4.next = 17;\n                return this.currentTransition;\n\n              case 17:\n                if (!this.isSheetModal) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                this.initSheetGesture();\n                /**\n                 * TODO (FW-937) - In the next major release of Ionic, all card modals\n                 * will be swipeable by default. canDismiss will be used to determine if the\n                 * modal can be dismissed. This check should change to check the presence of\n                 * presentingElement instead.\n                 *\n                 * If we did not do this check, then not using swipeToClose would mean you could\n                 * not run canDismiss on swipe as there would be no swipe gesture created.\n                 */\n\n                _context4.next = 24;\n                break;\n\n              case 21:\n                if (!(this.swipeToClose || this.canDismiss !== undefined && this.presentingElement !== undefined)) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                _context4.next = 24;\n                return this.initSwipeToClose();\n\n              case 24:\n                /* tslint:disable-next-line */\n                if (typeof window !== 'undefined') {\n                  this.keyboardOpenCallback = function () {\n                    if (_this3.gesture) {\n                      /**\n                       * When the native keyboard is opened and the webview\n                       * is resized, the gesture implementation will become unresponsive\n                       * and enter a free-scroll mode.\n                       *\n                       * When the keyboard is opened, we disable the gesture for\n                       * a single frame and re-enable once the contents have repositioned\n                       * from the keyboard placement.\n                       */\n                      _this3.gesture.enable(false);\n\n                      raf(function () {\n                        if (_this3.gesture) {\n                          _this3.gesture.enable(true);\n                        }\n                      });\n                    }\n                  };\n\n                  window.addEventListener(KEYBOARD_DID_OPEN, this.keyboardOpenCallback);\n                }\n\n                this.currentTransition = undefined;\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function present() {\n        return _present2.apply(this, arguments);\n      }\n\n      return present;\n    }()\n  }, {\n    key: \"initSwipeToClose\",\n    value: function () {\n      var _initSwipeToClose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this4 = this;\n\n        var el, animationBuilder, ani, contentEl, scrollEl;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(getIonMode(this) !== 'ios')) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                el = this.el; // All of the elements needed for the swipe gesture\n                // should be in the DOM and referenced by now, except\n                // for the presenting el\n\n                animationBuilder = this.leaveAnimation || config.get('modalLeave', iosLeaveAnimation);\n                ani = this.animation = animationBuilder(el, {\n                  presentingEl: this.presentingElement\n                });\n                contentEl = findIonContent(el);\n\n                if (contentEl) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                printIonContentErrorMsg(el);\n                return _context6.abrupt(\"return\");\n\n              case 9:\n                _context6.next = 11;\n                return getScrollElement(contentEl);\n\n              case 11:\n                scrollEl = _context6.sent;\n                this.gesture = createSwipeToCloseGesture(el, contentEl, scrollEl, ani, function () {\n                  /**\n                   * While the gesture animation is finishing\n                   * it is possible for a user to tap the backdrop.\n                   * This would result in the dismiss animation\n                   * being played again. Typically this is avoided\n                   * by setting `presented = false` on the overlay\n                   * component; however, we cannot do that here as\n                   * that would prevent the element from being\n                   * removed from the DOM.\n                   */\n                  _this4.gestureAnimationDismissing = true;\n\n                  _this4.animation.onFinish( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return _this4.dismiss(undefined, 'gesture');\n\n                          case 2:\n                            _this4.gestureAnimationDismissing = false;\n\n                          case 3:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  })));\n                });\n                this.gesture.enable(true);\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function initSwipeToClose() {\n        return _initSwipeToClose.apply(this, arguments);\n      }\n\n      return initSwipeToClose;\n    }()\n  }, {\n    key: \"initSheetGesture\",\n    value: function initSheetGesture() {\n      var _this5 = this;\n\n      var wrapperEl = this.wrapperEl,\n          initialBreakpoint = this.initialBreakpoint,\n          backdropBreakpoint = this.backdropBreakpoint;\n\n      if (!wrapperEl || initialBreakpoint === undefined) {\n        return;\n      }\n\n      var animationBuilder = this.enterAnimation || config.get('modalEnter', iosEnterAnimation);\n      var ani = this.animation = animationBuilder(this.el, {\n        presentingEl: this.presentingElement,\n        currentBreakpoint: initialBreakpoint,\n        backdropBreakpoint: backdropBreakpoint\n      });\n      ani.progressStart(true, 1);\n\n      var _createSheetGesture = createSheetGesture(this.el, this.backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, ani, this.sortedBreakpoints, function () {\n        var _a;\n\n        return (_a = _this5.currentBreakpoint) !== null && _a !== void 0 ? _a : 0;\n      }, function () {\n        return _this5.sheetOnDismiss();\n      }, function (breakpoint) {\n        if (_this5.currentBreakpoint !== breakpoint) {\n          _this5.currentBreakpoint = breakpoint;\n\n          _this5.ionBreakpointDidChange.emit({\n            breakpoint: breakpoint\n          });\n        }\n      }),\n          gesture = _createSheetGesture.gesture,\n          moveSheetToBreakpoint = _createSheetGesture.moveSheetToBreakpoint;\n\n      this.gesture = gesture;\n      this.moveSheetToBreakpoint = moveSheetToBreakpoint;\n      this.gesture.enable(true);\n    }\n  }, {\n    key: \"sheetOnDismiss\",\n    value: function sheetOnDismiss() {\n      var _this6 = this;\n\n      /**\n       * While the gesture animation is finishing\n       * it is possible for a user to tap the backdrop.\n       * This would result in the dismiss animation\n       * being played again. Typically this is avoided\n       * by setting `presented = false` on the overlay\n       * component; however, we cannot do that here as\n       * that would prevent the element from being\n       * removed from the DOM.\n       */\n      this.gestureAnimationDismissing = true;\n      this.animation.onFinish( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this6.currentBreakpoint = 0;\n\n                _this6.ionBreakpointDidChange.emit({\n                  breakpoint: _this6.currentBreakpoint\n                });\n\n                _context7.next = 4;\n                return _this6.dismiss(undefined, 'gesture');\n\n              case 4:\n                _this6.gestureAnimationDismissing = false;\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      })));\n    }\n    /**\n     * Dismiss the modal overlay after it has been presented.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function () {\n      var _dismiss2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(data, role) {\n        var _this7 = this;\n\n        var enteringAnimation, dismissed, _this$getDelegate2, delegate;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.gestureAnimationDismissing && role !== 'gesture')) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", false);\n\n              case 2:\n                _context8.t0 = role !== 'handler';\n\n                if (!_context8.t0) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.checkCanDismiss();\n\n              case 6:\n                _context8.t0 = !_context8.sent;\n\n              case 7:\n                if (!_context8.t0) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", false);\n\n              case 9:\n                /* tslint:disable-next-line */\n                if (typeof window !== 'undefined' && this.keyboardOpenCallback) {\n                  window.removeEventListener(KEYBOARD_DID_OPEN, this.keyboardOpenCallback);\n                }\n                /**\n                 * When using an inline modal\n                 * and presenting a modal it is possible to\n                 * quickly dismiss the modal while it is\n                 * presenting. We need to await any current\n                 * transition to allow the present to finish\n                 * before dismissing again.\n                 */\n\n\n                if (!(this.currentTransition !== undefined)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                _context8.next = 13;\n                return this.currentTransition;\n\n              case 13:\n                enteringAnimation = activeAnimations.get(this) || [];\n                this.currentTransition = _dismiss(this, data, role, 'modalLeave', iosLeaveAnimation, mdLeaveAnimation, {\n                  presentingEl: this.presentingElement,\n                  currentBreakpoint: this.currentBreakpoint || this.initialBreakpoint,\n                  backdropBreakpoint: this.backdropBreakpoint\n                });\n                _context8.next = 17;\n                return this.currentTransition;\n\n              case 17:\n                dismissed = _context8.sent;\n\n                if (!dismissed) {\n                  _context8.next = 26;\n                  break;\n                }\n\n                _this$getDelegate2 = this.getDelegate(), delegate = _this$getDelegate2.delegate;\n                _context8.next = 22;\n                return detachComponent(delegate, this.usersElement);\n\n              case 22:\n                writeTask(function () {\n                  return _this7.el.classList.remove('show-modal');\n                });\n\n                if (this.animation) {\n                  this.animation.destroy();\n                }\n\n                if (this.gesture) {\n                  this.gesture.destroy();\n                }\n\n                enteringAnimation.forEach(function (ani) {\n                  return ani.destroy();\n                });\n\n              case 26:\n                this.currentBreakpoint = undefined;\n                this.currentTransition = undefined;\n                this.animation = undefined;\n                return _context8.abrupt(\"return\", dismissed);\n\n              case 30:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function dismiss(_x4, _x5) {\n        return _dismiss2.apply(this, arguments);\n      }\n\n      return dismiss;\n    }()\n    /**\n     * Returns a promise that resolves when the modal did dismiss.\n     */\n\n  }, {\n    key: \"onDidDismiss\",\n    value: function onDidDismiss() {\n      return eventMethod(this.el, 'ionModalDidDismiss');\n    }\n    /**\n     * Returns a promise that resolves when the modal will dismiss.\n     */\n\n  }, {\n    key: \"onWillDismiss\",\n    value: function onWillDismiss() {\n      return eventMethod(this.el, 'ionModalWillDismiss');\n    }\n    /**\n     * Move a sheet style modal to a specific breakpoint. The breakpoint value must\n     * be a value defined in your `breakpoints` array.\n     */\n\n  }, {\n    key: \"setCurrentBreakpoint\",\n    value: function () {\n      var _setCurrentBreakpoint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(breakpoint) {\n        var currentBreakpoint, moveSheetToBreakpoint, canDismiss, breakpoints;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this.isSheetModal) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                printIonWarning('setCurrentBreakpoint is only supported on sheet modals.');\n                return _context9.abrupt(\"return\");\n\n              case 3:\n                if (this.breakpoints.includes(breakpoint)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                printIonWarning(\"Attempted to set invalid breakpoint value \".concat(breakpoint, \". Please double check that the breakpoint value is part of your defined breakpoints.\"));\n                return _context9.abrupt(\"return\");\n\n              case 6:\n                currentBreakpoint = this.currentBreakpoint, moveSheetToBreakpoint = this.moveSheetToBreakpoint, canDismiss = this.canDismiss, breakpoints = this.breakpoints;\n\n                if (!(currentBreakpoint === breakpoint)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 9:\n                if (moveSheetToBreakpoint) {\n                  moveSheetToBreakpoint({\n                    breakpoint: breakpoint,\n                    breakpointOffset: 1 - currentBreakpoint,\n                    canDismiss: canDismiss !== undefined && canDismiss !== true && breakpoints[0] === 0\n                  });\n                }\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function setCurrentBreakpoint(_x6) {\n        return _setCurrentBreakpoint.apply(this, arguments);\n      }\n\n      return setCurrentBreakpoint;\n    }()\n    /**\n     * Returns the current breakpoint of a sheet style modal\n     */\n\n  }, {\n    key: \"getCurrentBreakpoint\",\n    value: function () {\n      var _getCurrentBreakpoint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.currentBreakpoint);\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getCurrentBreakpoint() {\n        return _getCurrentBreakpoint.apply(this, arguments);\n      }\n\n      return getCurrentBreakpoint;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _Object$assign,\n          _this8 = this;\n\n      var handle = this.handle,\n          isSheetModal = this.isSheetModal,\n          presentingElement = this.presentingElement,\n          htmlAttributes = this.htmlAttributes;\n      var showHandle = handle !== false && isSheetModal;\n      var mode = getIonMode(this);\n      var modalId = this.modalId;\n      var isCardModal = presentingElement !== undefined && mode === 'ios';\n      return h(Host, Object.assign({\n        \"no-router\": true,\n        \"aria-modal\": \"true\",\n        tabindex: \"-1\"\n      }, htmlAttributes, {\n        style: {\n          zIndex: \"\".concat(20000 + this.overlayIndex)\n        },\n        class: Object.assign((_Object$assign = {}, _defineProperty(_Object$assign, mode, true), _defineProperty(_Object$assign, 'modal-default', !isCardModal && !isSheetModal), _defineProperty(_Object$assign, \"modal-card\", isCardModal), _defineProperty(_Object$assign, \"modal-sheet\", isSheetModal), _defineProperty(_Object$assign, 'overlay-hidden', true), _Object$assign), getClassMap(this.cssClass)),\n        id: modalId,\n        onIonBackdropTap: this.onBackdropTap,\n        onIonModalDidPresent: this.onLifecycle,\n        onIonModalWillPresent: this.onLifecycle,\n        onIonModalWillDismiss: this.onLifecycle,\n        onIonModalDidDismiss: this.onLifecycle\n      }), h(\"ion-backdrop\", {\n        ref: function ref(el) {\n          return _this8.backdropEl = el;\n        },\n        visible: this.showBackdrop,\n        tappable: this.backdropDismiss,\n        part: \"backdrop\"\n      }), mode === 'ios' && h(\"div\", {\n        class: \"modal-shadow\"\n      }), h(\"div\", {\n        role: \"dialog\",\n        class: \"modal-wrapper ion-overlay-wrapper\",\n        part: \"content\",\n        ref: function ref(el) {\n          return _this8.wrapperEl = el;\n        }\n      }, showHandle && h(\"div\", {\n        class: \"modal-handle\",\n        part: \"handle\"\n      }), h(\"slot\", null)));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"isOpen\": [\"onIsOpenChange\"],\n        \"trigger\": [\"onTriggerChange\"],\n        \"swipeToClose\": [\"swipeToCloseChanged\"]\n      };\n    }\n  }]);\n\n  return Modal;\n}();\n\nvar LIFECYCLE_MAP = {\n  ionModalDidPresent: 'ionViewDidEnter',\n  ionModalWillPresent: 'ionViewWillEnter',\n  ionModalWillDismiss: 'ionViewWillLeave',\n  ionModalDidDismiss: 'ionViewDidLeave'\n};\nvar modalIds = 0;\nModal.style = {\n  ios: modalIosCss,\n  md: modalMdCss\n};\nexport { Modal as ion_modal };","map":null,"metadata":{},"sourceType":"module"}