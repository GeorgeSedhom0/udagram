{"ast":null,"code":"import _createForOfIteratorHelper from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar GestureController = /*#__PURE__*/function () {\n  function GestureController() {\n    _classCallCheck(this, GestureController);\n\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n\n\n  _createClass(GestureController, [{\n    key: \"createGesture\",\n    value: function createGesture(config) {\n      return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n    }\n    /**\n     * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n     */\n\n  }, {\n    key: \"createBlocker\",\n    value: function createBlocker() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n    }\n  }, {\n    key: \"start\",\n    value: function start(gestureName, id, priority) {\n      if (!this.canStart(gestureName)) {\n        this.requestedStart.delete(id);\n        return false;\n      }\n\n      this.requestedStart.set(id, priority);\n      return true;\n    }\n  }, {\n    key: \"capture\",\n    value: function capture(gestureName, id, priority) {\n      if (!this.start(gestureName, id, priority)) {\n        return false;\n      }\n\n      var requestedStart = this.requestedStart;\n      var maxPriority = -10000;\n      requestedStart.forEach(function (value) {\n        maxPriority = Math.max(maxPriority, value);\n      });\n\n      if (maxPriority === priority) {\n        this.capturedId = id;\n        requestedStart.clear();\n        var event = new CustomEvent('ionGestureCaptured', {\n          detail: {\n            gestureName: gestureName\n          }\n        });\n        document.dispatchEvent(event);\n        return true;\n      }\n\n      requestedStart.delete(id);\n      return false;\n    }\n  }, {\n    key: \"release\",\n    value: function release(id) {\n      this.requestedStart.delete(id);\n\n      if (this.capturedId === id) {\n        this.capturedId = undefined;\n      }\n    }\n  }, {\n    key: \"disableGesture\",\n    value: function disableGesture(gestureName, id) {\n      var set = this.disabledGestures.get(gestureName);\n\n      if (set === undefined) {\n        set = new Set();\n        this.disabledGestures.set(gestureName, set);\n      }\n\n      set.add(id);\n    }\n  }, {\n    key: \"enableGesture\",\n    value: function enableGesture(gestureName, id) {\n      var set = this.disabledGestures.get(gestureName);\n\n      if (set !== undefined) {\n        set.delete(id);\n      }\n    }\n  }, {\n    key: \"disableScroll\",\n    value: function disableScroll(id) {\n      this.disabledScroll.add(id);\n\n      if (this.disabledScroll.size === 1) {\n        document.body.classList.add(BACKDROP_NO_SCROLL);\n      }\n    }\n  }, {\n    key: \"enableScroll\",\n    value: function enableScroll(id) {\n      this.disabledScroll.delete(id);\n\n      if (this.disabledScroll.size === 0) {\n        document.body.classList.remove(BACKDROP_NO_SCROLL);\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart(gestureName) {\n      if (this.capturedId !== undefined) {\n        // a gesture already captured\n        return false;\n      }\n\n      if (this.isDisabled(gestureName)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isCaptured\",\n    value: function isCaptured() {\n      return this.capturedId !== undefined;\n    }\n  }, {\n    key: \"isScrollDisabled\",\n    value: function isScrollDisabled() {\n      return this.disabledScroll.size > 0;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(gestureName) {\n      var disabled = this.disabledGestures.get(gestureName);\n\n      if (disabled && disabled.size > 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"newID\",\n    value: function newID() {\n      this.gestureId++;\n      return this.gestureId;\n    }\n  }]);\n\n  return GestureController;\n}();\n\nvar GestureDelegate = /*#__PURE__*/function () {\n  function GestureDelegate(ctrl, id, name, priority, disableScroll) {\n    _classCallCheck(this, GestureDelegate);\n\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n\n  _createClass(GestureDelegate, [{\n    key: \"canStart\",\n    value: function canStart() {\n      if (!this.ctrl) {\n        return false;\n      }\n\n      return this.ctrl.canStart(this.name);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.ctrl) {\n        return false;\n      }\n\n      return this.ctrl.start(this.name, this.id, this.priority);\n    }\n  }, {\n    key: \"capture\",\n    value: function capture() {\n      if (!this.ctrl) {\n        return false;\n      }\n\n      var captured = this.ctrl.capture(this.name, this.id, this.priority);\n\n      if (captured && this.disableScroll) {\n        this.ctrl.disableScroll(this.id);\n      }\n\n      return captured;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      if (this.ctrl) {\n        this.ctrl.release(this.id);\n\n        if (this.disableScroll) {\n          this.ctrl.enableScroll(this.id);\n        }\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.release();\n      this.ctrl = undefined;\n    }\n  }]);\n\n  return GestureDelegate;\n}();\n\nvar BlockerDelegate = /*#__PURE__*/function () {\n  function BlockerDelegate(ctrl, id, disable, disableScroll) {\n    _classCallCheck(this, BlockerDelegate);\n\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n\n  _createClass(BlockerDelegate, [{\n    key: \"block\",\n    value: function block() {\n      if (!this.ctrl) {\n        return;\n      }\n\n      if (this.disable) {\n        var _iterator = _createForOfIteratorHelper(this.disable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var gesture = _step.value;\n            this.ctrl.disableGesture(gesture, this.id);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      if (this.disableScroll) {\n        this.ctrl.disableScroll(this.id);\n      }\n    }\n  }, {\n    key: \"unblock\",\n    value: function unblock() {\n      if (!this.ctrl) {\n        return;\n      }\n\n      if (this.disable) {\n        var _iterator2 = _createForOfIteratorHelper(this.disable),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var gesture = _step2.value;\n            this.ctrl.enableGesture(gesture, this.id);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.unblock();\n      this.ctrl = undefined;\n    }\n  }]);\n\n  return BlockerDelegate;\n}();\n\nvar BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nvar GESTURE_CONTROLLER = new GestureController();\nexport { GESTURE_CONTROLLER as G };","map":null,"metadata":{},"sourceType":"module"}