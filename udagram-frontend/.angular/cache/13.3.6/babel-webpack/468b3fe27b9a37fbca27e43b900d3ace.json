{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-b3eecb14.js';\nimport { a as attachComponent } from './framework-delegate-ce4f806c.js';\nimport './helpers-4d272360.js';\nvar tabCss = \":host(.tab-hidden){display:none !important}\";\n\nvar Tab = /*#__PURE__*/function () {\n  function Tab(hostRef) {\n    _classCallCheck(this, Tab);\n\n    registerInstance(this, hostRef);\n    this.loaded = false;\n    /** @internal */\n\n    this.active = false;\n  }\n\n  _createClass(Tab, [{\n    key: \"componentWillLoad\",\n    value: function () {\n      var _componentWillLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.active) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.setActive();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillLoad() {\n        return _componentWillLoad.apply(this, arguments);\n      }\n\n      return componentWillLoad;\n    }()\n    /** Set the active component for the tab */\n\n  }, {\n    key: \"setActive\",\n    value: function () {\n      var _setActive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.prepareLazyLoaded();\n\n              case 2:\n                this.active = true;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setActive() {\n        return _setActive.apply(this, arguments);\n      }\n\n      return setActive;\n    }()\n  }, {\n    key: \"changeActive\",\n    value: function changeActive(isActive) {\n      if (isActive) {\n        this.prepareLazyLoaded();\n      }\n    }\n  }, {\n    key: \"prepareLazyLoaded\",\n    value: function prepareLazyLoaded() {\n      if (!this.loaded && this.component != null) {\n        this.loaded = true;\n\n        try {\n          return attachComponent(this.delegate, this.el, this.component, ['ion-page']);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      return Promise.resolve(undefined);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tab = this.tab,\n          active = this.active,\n          component = this.component;\n      return h(Host, {\n        role: \"tabpanel\",\n        \"aria-hidden\": !active ? 'true' : null,\n        \"aria-labelledby\": \"tab-button-\".concat(tab),\n        class: {\n          'ion-page': component === undefined,\n          'tab-hidden': !active\n        }\n      }, h(\"slot\", null));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"active\": [\"changeActive\"]\n      };\n    }\n  }]);\n\n  return Tab;\n}();\n\nTab.style = tabCss;\nvar tabsCss = \":host{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%;contain:layout size style;z-index:0}.tabs-inner{position:relative;-ms-flex:1;flex:1;contain:layout size style}\";\n\nvar Tabs = /*#__PURE__*/function () {\n  function Tabs(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Tabs);\n\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionTabsWillChange = createEvent(this, \"ionTabsWillChange\", 3);\n    this.ionTabsDidChange = createEvent(this, \"ionTabsDidChange\", 3);\n    this.transitioning = false;\n    /** @internal */\n\n    this.useRouter = false;\n\n    this.onTabClicked = function (ev) {\n      var _ev$detail = ev.detail,\n          href = _ev$detail.href,\n          tab = _ev$detail.tab;\n\n      if (_this.useRouter && href !== undefined) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          router.push(href);\n        }\n      } else {\n        _this.select(tab);\n      }\n    };\n  }\n\n  _createClass(Tabs, [{\n    key: \"componentWillLoad\",\n    value: function () {\n      var _componentWillLoad2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var tabs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.useRouter) {\n                  this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n                }\n\n                if (this.useRouter) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                tabs = this.tabs;\n\n                if (!(tabs.length > 0)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.select(tabs[0]);\n\n              case 6:\n                this.ionNavWillLoad.emit();\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentWillLoad() {\n        return _componentWillLoad2.apply(this, arguments);\n      }\n\n      return componentWillLoad;\n    }()\n  }, {\n    key: \"componentWillRender\",\n    value: function componentWillRender() {\n      var tabBar = this.el.querySelector('ion-tab-bar');\n\n      if (tabBar) {\n        var tab = this.selectedTab ? this.selectedTab.tab : undefined;\n        tabBar.selectedTab = tab;\n      }\n    }\n    /**\n     * Select a tab by the value of its `tab` property or an element reference.\n     *\n     * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\n     */\n\n  }, {\n    key: \"select\",\n    value: function () {\n      var _select = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tab) {\n        var selectedTab;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                selectedTab = _getTab(this.tabs, tab);\n\n                if (this.shouldSwitch(selectedTab)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 3:\n                _context4.next = 5;\n                return this.setActive(selectedTab);\n\n              case 5:\n                _context4.next = 7;\n                return this.notifyRouter();\n\n              case 7:\n                this.tabSwitch();\n                return _context4.abrupt(\"return\", true);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function select(_x) {\n        return _select.apply(this, arguments);\n      }\n\n      return select;\n    }()\n    /**\n     * Get a specific tab by the value of its `tab` property or an element reference.\n     *\n     * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\n     */\n\n  }, {\n    key: \"getTab\",\n    value: function () {\n      var _getTab2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tab) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", _getTab(this.tabs, tab));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTab(_x2) {\n        return _getTab2.apply(this, arguments);\n      }\n\n      return getTab;\n    }()\n    /**\n     * Get the currently selected tab.\n     */\n\n  }, {\n    key: \"getSelected\",\n    value: function getSelected() {\n      return Promise.resolve(this.selectedTab ? this.selectedTab.tab : undefined);\n    }\n    /** @internal */\n\n  }, {\n    key: \"setRouteId\",\n    value: function () {\n      var _setRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(id) {\n        var _this2 = this;\n\n        var selectedTab;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                selectedTab = _getTab(this.tabs, id);\n\n                if (this.shouldSwitch(selectedTab)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  changed: false,\n                  element: this.selectedTab\n                });\n\n              case 3:\n                _context6.next = 5;\n                return this.setActive(selectedTab);\n\n              case 5:\n                return _context6.abrupt(\"return\", {\n                  changed: true,\n                  element: this.selectedTab,\n                  markVisible: function markVisible() {\n                    return _this2.tabSwitch();\n                  }\n                });\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setRouteId(_x3) {\n        return _setRouteId.apply(this, arguments);\n      }\n\n      return setRouteId;\n    }()\n    /** @internal */\n\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _a, tabId;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                tabId = (_a = this.selectedTab) === null || _a === void 0 ? void 0 : _a.tab;\n                return _context7.abrupt(\"return\", tabId !== undefined ? {\n                  id: tabId,\n                  element: this.selectedTab\n                } : undefined);\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n\n      return getRouteId;\n    }()\n  }, {\n    key: \"setActive\",\n    value: function setActive(selectedTab) {\n      if (this.transitioning) {\n        return Promise.reject('transitioning already happening');\n      }\n\n      this.transitioning = true;\n      this.leavingTab = this.selectedTab;\n      this.selectedTab = selectedTab;\n      this.ionTabsWillChange.emit({\n        tab: selectedTab.tab\n      });\n      selectedTab.active = true;\n      return Promise.resolve();\n    }\n  }, {\n    key: \"tabSwitch\",\n    value: function tabSwitch() {\n      var selectedTab = this.selectedTab;\n      var leavingTab = this.leavingTab;\n      this.leavingTab = undefined;\n      this.transitioning = false;\n\n      if (!selectedTab) {\n        return;\n      }\n\n      if (leavingTab !== selectedTab) {\n        if (leavingTab) {\n          leavingTab.active = false;\n        }\n\n        this.ionTabsDidChange.emit({\n          tab: selectedTab.tab\n        });\n      }\n    }\n  }, {\n    key: \"notifyRouter\",\n    value: function notifyRouter() {\n      if (this.useRouter) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          return router.navChanged('forward');\n        }\n      }\n\n      return Promise.resolve(false);\n    }\n  }, {\n    key: \"shouldSwitch\",\n    value: function shouldSwitch(selectedTab) {\n      var leavingTab = this.selectedTab;\n      return selectedTab !== undefined && selectedTab !== leavingTab && !this.transitioning;\n    }\n  }, {\n    key: \"tabs\",\n    get: function get() {\n      return Array.from(this.el.querySelectorAll('ion-tab'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(Host, {\n        onIonTabButtonClick: this.onTabClicked\n      }, h(\"slot\", {\n        name: \"top\"\n      }), h(\"div\", {\n        class: \"tabs-inner\"\n      }, h(\"slot\", null)), h(\"slot\", {\n        name: \"bottom\"\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return Tabs;\n}();\n\nvar _getTab = function _getTab(tabs, tab) {\n  var tabEl = typeof tab === 'string' ? tabs.find(function (t) {\n    return t.tab === tab;\n  }) : tab;\n\n  if (!tabEl) {\n    console.error(\"tab with id: \\\"\".concat(tabEl, \"\\\" does not exist\"));\n  }\n\n  return tabEl;\n};\n\nTabs.style = tabsCss;\nexport { Tab as ion_tab, Tabs as ion_tabs };","map":null,"metadata":{},"sourceType":"module"}