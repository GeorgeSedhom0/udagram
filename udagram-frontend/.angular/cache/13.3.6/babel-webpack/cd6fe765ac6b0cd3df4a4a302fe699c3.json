{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n/**\n * Logs a warning to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n */\nvar printIonWarning = function printIonWarning(message) {\n  return console.warn(\"[Ionic Warning]: \".concat(message));\n};\n/*\n * Logs an error to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n * @param params - Additional arguments to supply to the console.error.\n */\n\n\nvar printIonError = function printIonError(message) {\n  var _console;\n\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return (_console = console).error.apply(_console, [\"[Ionic Error]: \".concat(message)].concat(params));\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within a specific selector.\n *\n * @param el The web component element this is requiring the element.\n * @param targetSelectors The selector or selectors that were not found.\n */\n\n\nvar printRequiredElementError = function printRequiredElementError(el) {\n  for (var _len2 = arguments.length, targetSelectors = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    targetSelectors[_key2 - 1] = arguments[_key2];\n  }\n\n  return console.error(\"<\".concat(el.tagName.toLowerCase(), \"> must be used inside \").concat(targetSelectors.join(' or '), \".\"));\n};\n\nexport { printRequiredElementError as a, printIonError as b, printIonWarning as p };","map":null,"metadata":{},"sourceType":"module"}