{"ast":null,"code":"import _defineProperty from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _asyncToGenerator from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as writeTask, r as registerInstance, e as createEvent, f as readTask, h, i as getElement, H as Host } from './index-b3eecb14.js';\nimport { a as isPlatform, b as getIonMode, c as config } from './ionic-global-f1ce4d2d.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-c313947a.js';\nimport { a as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-7cd5eefa.js';\nimport { t as transitionEndAsync, c as componentOnReady, l as clamp, g as getElementRoot, r as raf } from './helpers-4d272360.js';\nimport { d as hapticImpact } from './haptic-683b3b3c.js';\nimport { c as createAnimation } from './animation-36c1d77d.js';\nimport { f as caretBackSharp, g as arrowDown } from './index-e3f61316.js';\nimport { s as sanitizeDOMString } from './index-dff497fb.js';\nimport { S as SPINNERS } from './spinner-configs-5d6b6fe7.js';\nimport './index-9ac92660.js';\n\nvar getRefresherAnimationType = function getRefresherAnimationType(contentEl) {\n  var previousSibling = contentEl.previousElementSibling;\n  var hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\n  return hasHeader ? 'translate' : 'scale';\n};\n\nvar createPullingAnimation = function createPullingAnimation(type, pullingSpinner, refresherEl) {\n  return type === 'scale' ? createScaleAnimation(pullingSpinner, refresherEl) : createTranslateAnimation(pullingSpinner, refresherEl);\n};\n\nvar createBaseAnimation = function createBaseAnimation(pullingRefresherIcon) {\n  var spinner = pullingRefresherIcon.querySelector('ion-spinner');\n  var circle = spinner.shadowRoot.querySelector('circle');\n  var spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\n  var arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\n  var arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\n  var baseAnimation = createAnimation().duration(1000).easing('ease-out');\n  var spinnerArrowContainerAnimation = createAnimation().addElement(spinnerArrowContainer).keyframes([{\n    offset: 0,\n    opacity: '0.3'\n  }, {\n    offset: 0.45,\n    opacity: '0.3'\n  }, {\n    offset: 0.55,\n    opacity: '1'\n  }, {\n    offset: 1,\n    opacity: '1'\n  }]);\n  var circleInnerAnimation = createAnimation().addElement(circle).keyframes([{\n    offset: 0,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.2,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.55,\n    strokeDasharray: '100px, 200px'\n  }, {\n    offset: 1,\n    strokeDasharray: '100px, 200px'\n  }]);\n  var circleOuterAnimation = createAnimation().addElement(spinner).keyframes([{\n    offset: 0,\n    transform: 'rotate(-90deg)'\n  }, {\n    offset: 1,\n    transform: 'rotate(210deg)'\n  }]);\n  /**\n   * Only add arrow animation if present\n   * this allows users to customize the spinners\n   * without errors being thrown\n   */\n\n  if (arrowContainer && arrow) {\n    var arrowContainerAnimation = createAnimation().addElement(arrowContainer).keyframes([{\n      offset: 0,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.3,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.55,\n      transform: 'rotate(280deg)'\n    }, {\n      offset: 1,\n      transform: 'rotate(400deg)'\n    }]);\n    var arrowAnimation = createAnimation().addElement(arrow).keyframes([{\n      offset: 0,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.3,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.55,\n      transform: 'translateX(-1.5px) scale(1)'\n    }, {\n      offset: 1,\n      transform: 'translateX(-1.5px) scale(1)'\n    }]);\n    baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\n  }\n\n  return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\n};\n\nvar createScaleAnimation = function createScaleAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"scale(0) translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'scale(1) translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\n\nvar createTranslateAnimation = function createTranslateAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\n\nvar createSnapBackAnimation = function createSnapBackAnimation(pullingRefresherIcon) {\n  return createAnimation().duration(125).addElement(pullingRefresherIcon).fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\n}; // iOS Native Refresher\n// -----------------------------\n\n\nvar setSpinnerOpacity = function setSpinnerOpacity(spinner, opacity) {\n  spinner.style.setProperty('opacity', opacity.toString());\n};\n\nvar handleScrollWhilePulling = function handleScrollWhilePulling(ticks, numTicks, pullAmount) {\n  var max = 1;\n  writeTask(function () {\n    ticks.forEach(function (el, i) {\n      /**\n       * Compute the opacity of each tick\n       * mark as a percentage of the pullAmount\n       * offset by max / numTicks so\n       * the tick marks are shown staggered.\n       */\n      var min = i * (max / numTicks);\n      var range = max - min;\n      var start = pullAmount - min;\n      var progression = clamp(0, start / range, 1);\n      el.style.setProperty('opacity', progression.toString());\n    });\n  });\n};\n\nvar handleScrollWhileRefreshing = function handleScrollWhileRefreshing(spinner, lastVelocityY) {\n  writeTask(function () {\n    // If user pulls down quickly, the spinner should spin faster\n    spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\n    spinner.style.setProperty('opacity', '1');\n  });\n};\n\nvar translateElement = function translateElement(el, value) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n  if (!el) {\n    return Promise.resolve();\n  }\n\n  var trans = transitionEndAsync(el, duration);\n  writeTask(function () {\n    el.style.setProperty('transition', \"\".concat(duration, \"ms all ease-out\"));\n\n    if (value === undefined) {\n      el.style.removeProperty('transform');\n    } else {\n      el.style.setProperty('transform', \"translate3d(0px, \".concat(value, \", 0px)\"));\n    }\n  });\n  return trans;\n}; // Utils\n// -----------------------------\n\n\nvar shouldUseNativeRefresher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(referenceEl, mode) {\n    var refresherContent, pullingSpinner, refreshingSpinner;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            refresherContent = referenceEl.querySelector('ion-refresher-content');\n\n            if (refresherContent) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.resolve(false));\n\n          case 3:\n            _context.next = 5;\n            return new Promise(function (resolve) {\n              return componentOnReady(refresherContent, resolve);\n            });\n\n          case 5:\n            pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n            refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n            return _context.abrupt(\"return\", pullingSpinner !== null && refreshingSpinner !== null && (mode === 'ios' && isPlatform('mobile') && referenceEl.style.webkitOverflowScrolling !== undefined || mode === 'md'));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function shouldUseNativeRefresher(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar refresherIosCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, #747577)}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nvar refresherMdCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #3880ff)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #3880ff);font-size:12px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .arrow-container ion-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;border-radius:100%;padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, #ececec);background:var(--ion-color-step-250, #ffffff);-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\n\nvar Refresher = /*#__PURE__*/function () {\n  function Refresher(hostRef) {\n    _classCallCheck(this, Refresher);\n\n    registerInstance(this, hostRef);\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    this.pointerDown = false;\n    this.needsCompletion = false;\n    this.didRefresh = false;\n    this.lastVelocityY = 0;\n    this.animations = [];\n    this.nativeRefresher = false;\n    /**\n     * The current state which the refresher is in. The refresher's states include:\n     *\n     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n     * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n     */\n\n    this.state = 1\n    /* Inactive */\n    ;\n    /**\n     * The minimum distance the user must pull down until the\n     * refresher will go into the `refreshing` state.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n\n    this.pullMin = 60;\n    /**\n     * The maximum distance of the pull until the refresher\n     * will automatically go into the `refreshing` state.\n     * Defaults to the result of `pullMin + 60`.\n     * Does not apply when  the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n\n    this.pullMax = this.pullMin + 60;\n    /**\n     * Time it takes to close the refresher.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n\n    this.closeDuration = '280ms';\n    /**\n     * Time it takes the refresher to snap back to the `refreshing` state.\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n\n    this.snapbackDuration = '280ms';\n    /**\n     * How much to multiply the pull speed by. To slow the pull animation down,\n     * pass a number less than `1`. To speed up the pull, pass a number greater\n     * than `1`. The default value is `1` which is equal to the speed of the cursor.\n     * If a negative value is passed in, the factor will be `1` instead.\n     *\n     * For example: If the value passed is `1.2` and the content is dragged by\n     * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n     * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n     * will be `8` pixels, less than the amount the cursor has moved.\n     *\n     * Does not apply when the refresher content uses a spinner,\n     * enabling the native refresher.\n     */\n\n    this.pullFactor = 1;\n    /**\n     * If `true`, the refresher will be hidden.\n     */\n\n    this.disabled = false;\n  }\n\n  _createClass(Refresher, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.disabled);\n      }\n    }\n  }, {\n    key: \"checkNativeRefresher\",\n    value: function () {\n      var _checkNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var useNativeRefresher, contentEl;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return shouldUseNativeRefresher(this.el, getIonMode(this));\n\n              case 2:\n                useNativeRefresher = _context2.sent;\n\n                if (useNativeRefresher && !this.nativeRefresher) {\n                  contentEl = this.el.closest('ion-content');\n                  this.setupNativeRefresher(contentEl);\n                } else if (!useNativeRefresher) {\n                  this.destroyNativeRefresher();\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkNativeRefresher() {\n        return _checkNativeRefresher.apply(this, arguments);\n      }\n\n      return checkNativeRefresher;\n    }()\n  }, {\n    key: \"destroyNativeRefresher\",\n    value: function destroyNativeRefresher() {\n      if (this.scrollEl && this.scrollListenerCallback) {\n        this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n        this.scrollListenerCallback = undefined;\n      }\n\n      this.nativeRefresher = false;\n    }\n  }, {\n    key: \"resetNativeRefresher\",\n    value: function () {\n      var _resetNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(el, state) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.state = state;\n\n                if (!(getIonMode(this) === 'ios')) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 4;\n                return translateElement(el, undefined, 300);\n\n              case 4:\n                _context3.next = 8;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n\n              case 8:\n                this.didRefresh = false;\n                this.needsCompletion = false;\n                this.pointerDown = false;\n                this.animations.forEach(function (ani) {\n                  return ani.destroy();\n                });\n                this.animations = [];\n                this.progress = 0;\n                this.state = 1\n                /* Inactive */\n                ;\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function resetNativeRefresher(_x3, _x4) {\n        return _resetNativeRefresher.apply(this, arguments);\n      }\n\n      return resetNativeRefresher;\n    }()\n  }, {\n    key: \"setupiOSNativeRefresher\",\n    value: function () {\n      var _setupiOSNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(pullingSpinner, refreshingSpinner) {\n        var _this = this;\n\n        var ticks, MAX_PULL, NUM_TICKS;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.elementToTransform = this.scrollEl;\n                ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n                MAX_PULL = this.scrollEl.clientHeight * 0.16;\n                NUM_TICKS = ticks.length;\n                writeTask(function () {\n                  return ticks.forEach(function (el) {\n                    return el.style.setProperty('animation', 'none');\n                  });\n                });\n\n                this.scrollListenerCallback = function () {\n                  // If pointer is not on screen or refresher is not active, ignore scroll\n                  if (!_this.pointerDown && _this.state === 1\n                  /* Inactive */\n                  ) {\n                    return;\n                  }\n\n                  readTask(function () {\n                    // PTR should only be active when overflow scrolling at the top\n                    var scrollTop = _this.scrollEl.scrollTop;\n                    var refresherHeight = _this.el.clientHeight;\n\n                    if (scrollTop > 0) {\n                      /**\n                       * If refresher is refreshing and user tries to scroll\n                       * progressively fade refresher out/in\n                       */\n                      if (_this.state === 8\n                      /* Refreshing */\n                      ) {\n                        var ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                        writeTask(function () {\n                          return setSpinnerOpacity(refreshingSpinner, 1 - ratio);\n                        });\n                        return;\n                      }\n\n                      return;\n                    }\n\n                    if (_this.pointerDown) {\n                      if (!_this.didStart) {\n                        _this.didStart = true;\n\n                        _this.ionStart.emit();\n                      } // emit \"pulling\" on every move\n\n\n                      if (_this.pointerDown) {\n                        _this.ionPull.emit();\n                      }\n                    }\n                    /**\n                     * We want to delay the start of this gesture by ~30px\n                     * when initially pulling down so the refresher does not\n                     * overlap with the content. But when letting go of the\n                     * gesture before the refresher completes, we want the\n                     * refresher tick marks to quickly fade out.\n                     */\n\n\n                    var offset = _this.didStart ? 30 : 0;\n                    var pullAmount = _this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1);\n                    var shouldShowRefreshingSpinner = _this.state === 8\n                    /* Refreshing */\n                    || pullAmount === 1;\n\n                    if (shouldShowRefreshingSpinner) {\n                      if (_this.pointerDown) {\n                        handleScrollWhileRefreshing(refreshingSpinner, _this.lastVelocityY);\n                      }\n\n                      if (!_this.didRefresh) {\n                        _this.beginRefresh();\n\n                        _this.didRefresh = true;\n                        hapticImpact({\n                          style: 'light'\n                        });\n                        /**\n                         * Translate the content element otherwise when pointer is removed\n                         * from screen the scroll content will bounce back over the refresher\n                         */\n\n                        if (!_this.pointerDown) {\n                          translateElement(_this.elementToTransform, \"\".concat(refresherHeight, \"px\"));\n                        }\n                      }\n                    } else {\n                      _this.state = 2\n                      /* Pulling */\n                      ;\n                      handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                    }\n                  });\n                };\n\n                this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n                _context4.next = 9;\n                return import('./index-3f1a7d95.js');\n\n              case 9:\n                this.gesture = _context4.sent.createGesture({\n                  el: this.scrollEl,\n                  gestureName: 'refresher',\n                  gesturePriority: 31,\n                  direction: 'y',\n                  threshold: 5,\n                  onStart: function onStart() {\n                    _this.pointerDown = true;\n\n                    if (!_this.didRefresh) {\n                      translateElement(_this.elementToTransform, '0px');\n                    }\n                    /**\n                     * If the content had `display: none` when\n                     * the refresher was initialized, its clientHeight\n                     * will be 0. When the gesture starts, the content\n                     * will be visible, so try to get the correct\n                     * client height again. This is most common when\n                     * using the refresher in an ion-menu.\n                     */\n\n\n                    if (MAX_PULL === 0) {\n                      MAX_PULL = _this.scrollEl.clientHeight * 0.16;\n                    }\n                  },\n                  onMove: function onMove(ev) {\n                    _this.lastVelocityY = ev.velocityY;\n                  },\n                  onEnd: function onEnd() {\n                    _this.pointerDown = false;\n                    _this.didStart = false;\n\n                    if (_this.needsCompletion) {\n                      _this.resetNativeRefresher(_this.elementToTransform, 32\n                      /* Completing */\n                      );\n\n                      _this.needsCompletion = false;\n                    } else if (_this.didRefresh) {\n                      readTask(function () {\n                        return translateElement(_this.elementToTransform, \"\".concat(_this.el.clientHeight, \"px\"));\n                      });\n                    }\n                  }\n                });\n                this.disabledChanged();\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setupiOSNativeRefresher(_x5, _x6) {\n        return _setupiOSNativeRefresher.apply(this, arguments);\n      }\n\n      return setupiOSNativeRefresher;\n    }()\n  }, {\n    key: \"setupMDNativeRefresher\",\n    value: function () {\n      var _setupMDNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(contentEl, pullingSpinner, refreshingSpinner) {\n        var _this2 = this;\n\n        var circle, pullingRefresherIcon, refreshingCircle;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                circle = getElementRoot(pullingSpinner).querySelector('circle');\n                pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n                refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n\n                if (circle !== null && refreshingCircle !== null) {\n                  writeTask(function () {\n                    circle.style.setProperty('animation', 'none'); // This lines up the animation on the refreshing spinner with the pulling spinner\n\n                    refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                    refreshingCircle.style.setProperty('animation-delay', '-655ms');\n                  });\n                }\n\n                _context6.next = 6;\n                return import('./index-3f1a7d95.js');\n\n              case 6:\n                this.gesture = _context6.sent.createGesture({\n                  el: this.scrollEl,\n                  gestureName: 'refresher',\n                  gesturePriority: 31,\n                  direction: 'y',\n                  threshold: 5,\n                  canStart: function canStart() {\n                    return _this2.state !== 8\n                    /* Refreshing */\n                    && _this2.state !== 32\n                    /* Completing */\n                    && _this2.scrollEl.scrollTop === 0;\n                  },\n                  onStart: function onStart(ev) {\n                    ev.data = {\n                      animation: undefined,\n                      didStart: false,\n                      cancelled: false\n                    };\n                  },\n                  onMove: function onMove(ev) {\n                    if (ev.velocityY < 0 && _this2.progress === 0 && !ev.data.didStart || ev.data.cancelled) {\n                      ev.data.cancelled = true;\n                      return;\n                    }\n\n                    if (!ev.data.didStart) {\n                      ev.data.didStart = true;\n                      _this2.state = 2\n                      /* Pulling */\n                      ;\n                      writeTask(function () {\n                        return _this2.scrollEl.style.setProperty('--overflow', 'hidden');\n                      });\n                      var animationType = getRefresherAnimationType(contentEl);\n                      var animation = createPullingAnimation(animationType, pullingRefresherIcon, _this2.el);\n                      ev.data.animation = animation;\n                      animation.progressStart(false, 0);\n\n                      _this2.ionStart.emit();\n\n                      _this2.animations.push(animation);\n\n                      return;\n                    } // Since we are using an easing curve, slow the gesture tracking down a bit\n\n\n                    _this2.progress = clamp(0, ev.deltaY / 180 * 0.5, 1);\n                    ev.data.animation.progressStep(_this2.progress);\n\n                    _this2.ionPull.emit();\n                  },\n                  onEnd: function onEnd(ev) {\n                    if (!ev.data.didStart) {\n                      return;\n                    }\n\n                    writeTask(function () {\n                      return _this2.scrollEl.style.removeProperty('--overflow');\n                    });\n\n                    if (_this2.progress <= 0.4) {\n                      _this2.gesture.enable(false);\n\n                      ev.data.animation.progressEnd(0, _this2.progress, 500).onFinish(function () {\n                        _this2.animations.forEach(function (ani) {\n                          return ani.destroy();\n                        });\n\n                        _this2.animations = [];\n\n                        _this2.gesture.enable(true);\n\n                        _this2.state = 1\n                        /* Inactive */\n                        ;\n                      });\n                      return;\n                    }\n\n                    var progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], _this2.progress)[0];\n                    var snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n\n                    _this2.animations.push(snapBackAnimation);\n\n                    writeTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', \"\".concat(progress * 100, \"px\"));\n                              ev.data.animation.progressEnd();\n                              _context5.next = 4;\n                              return snapBackAnimation.play();\n\n                            case 4:\n                              _this2.beginRefresh();\n\n                              ev.data.animation.destroy();\n\n                            case 6:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    })));\n                  }\n                });\n                this.disabledChanged();\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setupMDNativeRefresher(_x7, _x8, _x9) {\n        return _setupMDNativeRefresher.apply(this, arguments);\n      }\n\n      return setupMDNativeRefresher;\n    }()\n  }, {\n    key: \"setupNativeRefresher\",\n    value: function () {\n      var _setupNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(contentEl) {\n        var pullingSpinner, refreshingSpinner;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 2:\n                /**\n                 * If using non-native refresher before make sure\n                 * we clean up any old CSS. This can happen when\n                 * a user manually calls the refresh method in a\n                 * component create callback before the native\n                 * refresher is setup.\n                 */\n                this.setCss(0, '', false, '');\n                this.nativeRefresher = true;\n                pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n                refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n\n                if (getIonMode(this) === 'ios') {\n                  this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n                } else {\n                  this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n                }\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function setupNativeRefresher(_x10) {\n        return _setupNativeRefresher.apply(this, arguments);\n      }\n\n      return setupNativeRefresher;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.checkNativeRefresher();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _this3 = this;\n\n        var _a, contentEl, backgroundContentHost;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.el.getAttribute('slot') !== 'fixed')) {\n                  _context8.next = 3;\n                  break;\n                }\n\n                console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n                return _context8.abrupt(\"return\");\n\n              case 3:\n                contentEl = findClosestIonContent(this.el);\n\n                if (contentEl) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                printIonContentErrorMsg(this.el);\n                return _context8.abrupt(\"return\");\n\n              case 7:\n                _context8.next = 9;\n                return getScrollElement(contentEl);\n\n              case 9:\n                this.scrollEl = _context8.sent;\n\n                /**\n                 * Query the host `ion-content` directly (if it is available), to use its\n                 * inner #background-content has the target. Otherwise fallback to the\n                 * custom scroll target host.\n                 *\n                 * This makes it so that implementers do not need to re-create the background content\n                 * element and styles.\n                 */\n                backgroundContentHost = (_a = this.el.closest('ion-content')) !== null && _a !== void 0 ? _a : contentEl;\n                this.backgroundContentEl = getElementRoot(backgroundContentHost).querySelector('#background-content');\n                _context8.next = 14;\n                return shouldUseNativeRefresher(this.el, getIonMode(this));\n\n              case 14:\n                if (!_context8.sent) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                this.setupNativeRefresher(contentEl);\n                _context8.next = 22;\n                break;\n\n              case 18:\n                _context8.next = 20;\n                return import('./index-3f1a7d95.js');\n\n              case 20:\n                this.gesture = _context8.sent.createGesture({\n                  el: contentEl,\n                  gestureName: 'refresher',\n                  gesturePriority: 31,\n                  direction: 'y',\n                  threshold: 20,\n                  passive: false,\n                  canStart: function canStart() {\n                    return _this3.canStart();\n                  },\n                  onStart: function onStart() {\n                    return _this3.onStart();\n                  },\n                  onMove: function onMove(ev) {\n                    return _this3.onMove(ev);\n                  },\n                  onEnd: function onEnd() {\n                    return _this3.onEnd();\n                  }\n                });\n                this.disabledChanged();\n\n              case 22:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.destroyNativeRefresher();\n      this.scrollEl = undefined;\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function () {\n      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this.nativeRefresher) {\n                  this.needsCompletion = true; // Do not reset scroll el until user removes pointer from screen\n\n                  if (!this.pointerDown) {\n                    raf(function () {\n                      return raf(function () {\n                        return _this4.resetNativeRefresher(_this4.elementToTransform, 32\n                        /* Completing */\n                        );\n                      });\n                    });\n                  }\n                } else {\n                  this.close(32\n                  /* Completing */\n                  , '120ms');\n                }\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function complete() {\n        return _complete.apply(this, arguments);\n      }\n\n      return complete;\n    }()\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this.nativeRefresher) {\n                  // Do not reset scroll el until user removes pointer from screen\n                  if (!this.pointerDown) {\n                    raf(function () {\n                      return raf(function () {\n                        return _this5.resetNativeRefresher(_this5.elementToTransform, 16\n                        /* Cancelling */\n                        );\n                      });\n                    });\n                  }\n                } else {\n                  this.close(16\n                  /* Cancelling */\n                  , '');\n                }\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      return Promise.resolve(this.progress);\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      if (!this.scrollEl) {\n        return false;\n      }\n\n      if (this.state !== 1\n      /* Inactive */\n      ) {\n        return false;\n      } // if the scrollTop is greater than zero then it's\n      // not possible to pull the content down yet\n\n\n      if (this.scrollEl.scrollTop > 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.progress = 0;\n      this.state = 1\n      /* Inactive */\n      ;\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      if (!this.scrollEl) {\n        return;\n      } // this method can get called like a bazillion times per second,\n      // so it's built to be as efficient as possible, and does its\n      // best to do any DOM read/writes only when absolutely necessary\n      // if multi-touch then get out immediately\n\n\n      var ev = detail.event;\n\n      if (ev.touches && ev.touches.length > 1) {\n        return;\n      } // do nothing if it's actively refreshing\n      // or it's in the way of closing\n      // or this was never a startY\n\n\n      if ((this.state & 56\n      /* _BUSY_ */\n      ) !== 0) {\n        return;\n      }\n\n      var pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n      var deltaY = detail.deltaY * pullFactor; // don't bother if they're scrolling up\n      // and have not already started dragging\n\n      if (deltaY <= 0) {\n        // the current Y is higher than the starting Y\n        // so they scrolled up enough to be ignored\n        this.progress = 0;\n        this.state = 1\n        /* Inactive */\n        ;\n\n        if (this.appliedStyles) {\n          // reset the styles only if they were applied\n          this.setCss(0, '', false, '');\n          return;\n        }\n\n        return;\n      }\n\n      if (this.state === 1\n      /* Inactive */\n      ) {\n        // this refresh is not already actively pulling down\n        // get the content's scrollTop\n        var scrollHostScrollTop = this.scrollEl.scrollTop; // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n\n        if (scrollHostScrollTop > 0) {\n          this.progress = 0;\n          return;\n        } // content scrolled all the way to the top, and dragging down\n\n\n        this.state = 2\n        /* Pulling */\n        ;\n      } // prevent native scroll events\n\n\n      if (ev.cancelable) {\n        ev.preventDefault();\n      } // the refresher is actively pulling at this point\n      // move the scroll element within the content element\n\n\n      this.setCss(deltaY, '0ms', true, '');\n\n      if (deltaY === 0) {\n        // don't continue if there's no delta yet\n        this.progress = 0;\n        return;\n      }\n\n      var pullMin = this.pullMin; // set pull progress\n\n      this.progress = deltaY / pullMin; // emit \"start\" if it hasn't started yet\n\n      if (!this.didStart) {\n        this.didStart = true;\n        this.ionStart.emit();\n      } // emit \"pulling\" on every move\n\n\n      this.ionPull.emit(); // do nothing if the delta is less than the pull threshold\n\n      if (deltaY < pullMin) {\n        // ensure it stays in the pulling state, cuz its not ready yet\n        this.state = 2\n        /* Pulling */\n        ;\n        return;\n      }\n\n      if (deltaY > this.pullMax) {\n        // they pulled farther than the max, so kick off the refresh\n        this.beginRefresh();\n        return;\n      } // pulled farther than the pull min!!\n      // it is now in the `ready` state!!\n      // if they let go then it'll refresh, kerpow!!\n\n\n      this.state = 4\n      /* Ready */\n      ;\n      return;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      // only run in a zone when absolutely necessary\n      if (this.state === 4\n      /* Ready */\n      ) {\n        // they pulled down far enough, so it's ready to refresh\n        this.beginRefresh();\n      } else if (this.state === 2\n      /* Pulling */\n      ) {\n        // they were pulling down, but didn't pull down far enough\n        // set the content back to it's original location\n        // and close the refresher\n        // set that the refresh is actively cancelling\n        this.cancel();\n      }\n    }\n  }, {\n    key: \"beginRefresh\",\n    value: function beginRefresh() {\n      // assumes we're already back in a zone\n      // they pulled down far enough, so it's ready to refresh\n      this.state = 8\n      /* Refreshing */\n      ; // place the content in a hangout position while it thinks\n\n      this.setCss(this.pullMin, this.snapbackDuration, true, ''); // emit \"refresh\" because it was pulled down far enough\n      // and they let go to begin refreshing\n\n      this.ionRefresh.emit({\n        complete: this.complete.bind(this)\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(state, delay) {\n      var _this6 = this;\n\n      // create fallback timer incase something goes wrong with transitionEnd event\n      setTimeout(function () {\n        _this6.state = 1\n        /* Inactive */\n        ;\n        _this6.progress = 0;\n        _this6.didStart = false;\n\n        _this6.setCss(0, '0ms', false, '');\n      }, 600); // reset set the styles on the scroll element\n      // set that the refresh is actively cancelling/completing\n\n      this.state = state;\n      this.setCss(0, this.closeDuration, true, delay); // TODO: stop gesture\n    }\n  }, {\n    key: \"setCss\",\n    value: function setCss(y, duration, overflowVisible, delay) {\n      var _this7 = this;\n\n      if (this.nativeRefresher) {\n        return;\n      }\n\n      this.appliedStyles = y > 0;\n      writeTask(function () {\n        if (_this7.scrollEl && _this7.backgroundContentEl) {\n          var scrollStyle = _this7.scrollEl.style;\n          var backgroundStyle = _this7.backgroundContentEl.style;\n          scrollStyle.transform = backgroundStyle.transform = y > 0 ? \"translateY(\".concat(y, \"px) translateZ(0px)\") : '';\n          scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n          scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n          scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class;\n\n      var mode = getIonMode(this);\n      return h(Host, {\n        slot: \"fixed\",\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, \"refresher-\".concat(mode), true), _defineProperty(_class, 'refresher-native', this.nativeRefresher), _defineProperty(_class, 'refresher-active', this.state !== 1), _defineProperty(_class, 'refresher-pulling', this.state === 2), _defineProperty(_class, 'refresher-ready', this.state === 4), _defineProperty(_class, 'refresher-refreshing', this.state === 8), _defineProperty(_class, 'refresher-cancelling', this.state === 16), _defineProperty(_class, 'refresher-completing', this.state === 32), _class)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n\n  return Refresher;\n}();\n\nRefresher.style = {\n  ios: refresherIosCss,\n  md: refresherMdCss\n};\n\nvar RefresherContent = /*#__PURE__*/function () {\n  function RefresherContent(hostRef) {\n    _classCallCheck(this, RefresherContent);\n\n    registerInstance(this, hostRef);\n  }\n\n  _createClass(RefresherContent, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      if (this.pullingIcon === undefined) {\n        var mode = getIonMode(this);\n        var overflowRefresher = this.el.style.webkitOverflowScrolling !== undefined ? 'lines' : arrowDown;\n        this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && isPlatform('mobile') ? config.get('spinner', overflowRefresher) : 'circular');\n      }\n\n      if (this.refreshingSpinner === undefined) {\n        var _mode = getIonMode(this);\n\n        this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', _mode === 'ios' ? 'lines' : 'circular'));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pullingIcon = this.pullingIcon;\n      var hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: mode\n      }, h(\"div\", {\n        class: \"refresher-pulling\"\n      }, this.pullingIcon && hasSpinner && h(\"div\", {\n        class: \"refresher-pulling-icon\"\n      }, h(\"div\", {\n        class: \"spinner-arrow-container\"\n      }, h(\"ion-spinner\", {\n        name: this.pullingIcon,\n        paused: true\n      }), mode === 'md' && this.pullingIcon === 'circular' && h(\"div\", {\n        class: \"arrow-container\"\n      }, h(\"ion-icon\", {\n        icon: caretBackSharp\n      })))), this.pullingIcon && !hasSpinner && h(\"div\", {\n        class: \"refresher-pulling-icon\"\n      }, h(\"ion-icon\", {\n        icon: this.pullingIcon,\n        lazy: false\n      })), this.pullingText && h(\"div\", {\n        class: \"refresher-pulling-text\",\n        innerHTML: sanitizeDOMString(this.pullingText)\n      })), h(\"div\", {\n        class: \"refresher-refreshing\"\n      }, this.refreshingSpinner && h(\"div\", {\n        class: \"refresher-refreshing-icon\"\n      }, h(\"ion-spinner\", {\n        name: this.refreshingSpinner\n      })), this.refreshingText && h(\"div\", {\n        class: \"refresher-refreshing-text\",\n        innerHTML: sanitizeDOMString(this.refreshingText)\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return RefresherContent;\n}();\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };","map":null,"metadata":{},"sourceType":"module"}