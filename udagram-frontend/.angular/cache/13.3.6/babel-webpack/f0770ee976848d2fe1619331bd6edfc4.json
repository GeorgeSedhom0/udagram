{"ast":null,"code":"import _toConsumableArray from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _defineProperty from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _asyncToGenerator from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-b3eecb14.js';\nimport { i as chevronDown } from './index-e3f61316.js';\nimport { c as config, b as getIonMode } from './ionic-global-f1ce4d2d.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-4d272360.js';\nvar accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nvar accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\n\nvar Accordion = /*#__PURE__*/function () {\n  function Accordion(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Accordion);\n\n    registerInstance(this, hostRef);\n\n    this.updateListener = function () {\n      return _this.updateState(false);\n    };\n\n    this.state = 1\n    /* Collapsed */\n    ;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n\n    this.value = \"ion-accordion-\".concat(accordionIds++);\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n\n    this.toggleIconSlot = 'end';\n\n    this.setItemDefaults = function () {\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n\n\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n\n    this.getSlottedHeaderIonItem = function () {\n      var headerEl = _this.headerEl;\n\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n\n\n      var slot = headerEl.querySelector('slot');\n\n      if (!slot) {\n        return;\n      } // This is not defined in unit tests\n\n\n      var ionItem = slot.assignedElements && slot.assignedElements().find(function (el) {\n        return el.tagName === 'ION-ITEM';\n      });\n      return ionItem;\n    };\n\n    this.setAria = function () {\n      var expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n\n\n      var root = getElementRoot(ionItem);\n      var button = root.querySelector('button');\n\n      if (!button) {\n        return;\n      }\n\n      button.setAttribute('aria-expanded', \"\".concat(expanded));\n    };\n\n    this.slotToggleIcon = function () {\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n\n      var toggleIconSlot = _this.toggleIconSlot,\n          toggleIcon = _this.toggleIcon;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n\n      var existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n\n      if (existingToggleIcon) {\n        return;\n      }\n\n      var iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n\n    this.expandAccordion = function () {\n      var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (initialUpdate) {\n        _this.state = 4\n        /* Expanded */\n        ;\n        return;\n      }\n\n      if (_this.state === 4\n      /* Expanded */\n      ) {\n        return;\n      }\n\n      var contentEl = _this.contentEl,\n          contentElWrapper = _this.contentElWrapper;\n\n      if (contentEl === undefined || contentElWrapper === undefined) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        raf(function () {\n          _this.state = 8\n          /* Expanding */\n          ;\n          _this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var contentHeight, waitForTransition;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    contentHeight = contentElWrapper.offsetHeight;\n                    waitForTransition = transitionEndAsync(contentEl, 2000);\n                    contentEl.style.setProperty('max-height', \"\".concat(contentHeight, \"px\"));\n                    _context.next = 5;\n                    return waitForTransition;\n\n                  case 5:\n                    _this.state = 4\n                    /* Expanded */\n                    ;\n                    contentEl.style.removeProperty('max-height');\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })));\n        });\n      } else {\n        _this.state = 4\n        /* Expanded */\n        ;\n      }\n    };\n\n    this.collapseAccordion = function () {\n      var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (initialUpdate) {\n        _this.state = 1\n        /* Collapsed */\n        ;\n        return;\n      }\n\n      if (_this.state === 1\n      /* Collapsed */\n      ) {\n        return;\n      }\n\n      var contentEl = _this.contentEl;\n\n      if (contentEl === undefined) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        _this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var contentHeight;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  contentHeight = contentEl.offsetHeight;\n                  contentEl.style.setProperty('max-height', \"\".concat(contentHeight, \"px\"));\n                  raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                    var waitForTransition;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            waitForTransition = transitionEndAsync(contentEl, 2000);\n                            _this.state = 2\n                            /* Collapsing */\n                            ;\n                            _context2.next = 4;\n                            return waitForTransition;\n\n                          case 4:\n                            _this.state = 1\n                            /* Collapsed */\n                            ;\n                            contentEl.style.removeProperty('max-height');\n\n                          case 6:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  })));\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        })));\n      } else {\n        _this.state = 1\n        /* Collapsed */\n        ;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n\n\n    this.shouldAnimate = function () {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n\n      var prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      if (prefersReducedMotion) {\n        return false;\n      }\n\n      var animated = config.get('animated', true);\n\n      if (!animated) {\n        return false;\n      }\n\n      if (_this.accordionGroupEl && !_this.accordionGroupEl.animated) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateState = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var initialUpdate,\n          accordionGroup,\n          accordionValue,\n          value,\n          shouldExpand,\n          nextAccordion,\n          nextAccordionValue,\n          previousAccordion,\n          previousAccordionValue,\n          _args4 = arguments;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              initialUpdate = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;\n              accordionGroup = _this.accordionGroupEl;\n              accordionValue = _this.value;\n\n              if (accordionGroup) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 5:\n              value = accordionGroup.value;\n              shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n\n              if (shouldExpand) {\n                _this.expandAccordion(initialUpdate);\n\n                _this.isNext = _this.isPrevious = false;\n              } else {\n                _this.collapseAccordion(initialUpdate);\n                /**\n                 * When using popout or inset,\n                 * the collapsed accordion items\n                 * may need additional border radius\n                 * applied. Check to see if the\n                 * next or previous accordion is selected.\n                 */\n\n\n                nextAccordion = _this.getNextSibling();\n                nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n\n                if (nextAccordionValue !== undefined) {\n                  _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n                }\n\n                previousAccordion = _this.getPreviousSibling();\n                previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n\n                if (previousAccordionValue !== undefined) {\n                  _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n                }\n              }\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    this.getNextSibling = function () {\n      if (!_this.el) {\n        return;\n      }\n\n      var nextSibling = _this.el.nextElementSibling;\n\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return nextSibling;\n    };\n\n    this.getPreviousSibling = function () {\n      if (!_this.el) {\n        return;\n      }\n\n      var previousSibling = _this.el.previousElementSibling;\n\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return previousSibling;\n    };\n  }\n\n  _createClass(Accordion, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _a;\n\n      var accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n\n      if (accordionGroupEl) {\n        this.updateState(true);\n        addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var accordionGroupEl = this.accordionGroupEl;\n\n      if (accordionGroupEl) {\n        removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      this.setItemDefaults();\n      this.slotToggleIcon();\n      /**\n       * We need to wait a tick because we\n       * just set ionItem.button = true and\n       * the button has not have been rendered yet.\n       */\n\n      raf(function () {\n        /**\n         * Set aria label on button inside of ion-item\n         * once the inner content has been rendered.\n         */\n        var expanded = _this2.state === 4\n        /* Expanded */\n        || _this2.state === 8\n        /* Expanding */\n        ;\n\n        _this2.setAria(expanded);\n      });\n    }\n  }, {\n    key: \"toggleExpanded\",\n    value: function toggleExpanded() {\n      var accordionGroupEl = this.accordionGroupEl,\n          value = this.value,\n          state = this.state;\n\n      if (accordionGroupEl) {\n        /**\n         * Because the accordion group may or may\n         * not allow multiple accordions open, we\n         * need to request the toggling of this\n         * accordion and the accordion group will\n         * make the decision on whether or not\n         * to allow it.\n         */\n        var expand = state === 1\n        /* Collapsed */\n        || state === 2\n        /* Collapsing */\n        ;\n        accordionGroupEl.requestAccordionToggle(value, expand);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class,\n          _this3 = this;\n\n      var disabled = this.disabled,\n          readonly = this.readonly;\n      var mode = getIonMode(this);\n      var expanded = this.state === 4\n      /* Expanded */\n      || this.state === 8\n      /* Expanding */\n      ;\n      var headerPart = expanded ? 'header expanded' : 'header';\n      var contentPart = expanded ? 'content expanded' : 'content';\n      this.setAria(expanded);\n      return h(Host, {\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'accordion-expanding', this.state === 8), _defineProperty(_class, 'accordion-expanded', this.state === 4), _defineProperty(_class, 'accordion-collapsing', this.state === 2), _defineProperty(_class, 'accordion-collapsed', this.state === 1), _defineProperty(_class, 'accordion-next', this.isNext), _defineProperty(_class, 'accordion-previous', this.isPrevious), _defineProperty(_class, 'accordion-disabled', disabled), _defineProperty(_class, 'accordion-readonly', readonly), _defineProperty(_class, 'accordion-animated', config.getBoolean('animated', true)), _class)\n      }, h(\"div\", {\n        onClick: function onClick() {\n          return _this3.toggleExpanded();\n        },\n        id: \"header\",\n        part: headerPart,\n        \"aria-controls\": \"content\",\n        ref: function ref(headerEl) {\n          return _this3.headerEl = headerEl;\n        }\n      }, h(\"slot\", {\n        name: \"header\"\n      })), h(\"div\", {\n        id: \"content\",\n        part: contentPart,\n        role: \"region\",\n        \"aria-labelledby\": \"header\",\n        ref: function ref(contentEl) {\n          return _this3.contentEl = contentEl;\n        }\n      }, h(\"div\", {\n        id: \"content-wrapper\",\n        ref: function ref(contentElWrapper) {\n          return _this3.contentElWrapper = contentElWrapper;\n        }\n      }, h(\"slot\", {\n        name: \"content\"\n      }))));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"delegatesFocus\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Accordion;\n}();\n\nvar accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\nvar accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nvar accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n\nvar AccordionGroup = /*#__PURE__*/function () {\n  function AccordionGroup(hostRef) {\n    _classCallCheck(this, AccordionGroup);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n\n    this.expand = 'compact';\n  }\n\n  _createClass(AccordionGroup, [{\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      var value = this.value,\n          multiple = this.multiple;\n      /**\n       * If accordion group does not\n       * let multiple accordions be open\n       * at once, but user passes an array\n       * just grab the first value.\n       */\n\n      if (!multiple && Array.isArray(value)) {\n        this.value = value[0];\n      } else {\n        this.ionChange.emit({\n          value: this.value\n        });\n      }\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function () {\n      var _disabledChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var disabled, accordions, _iterator, _step, accordion;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                disabled = this.disabled;\n                _context5.next = 3;\n                return this.getAccordions();\n\n              case 3:\n                accordions = _context5.sent;\n                _iterator = _createForOfIteratorHelper(accordions);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    accordion = _step.value;\n                    accordion.disabled = disabled;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function disabledChanged() {\n        return _disabledChanged.apply(this, arguments);\n      }\n\n      return disabledChanged;\n    }()\n  }, {\n    key: \"readonlyChanged\",\n    value: function () {\n      var _readonlyChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var readonly, accordions, _iterator2, _step2, accordion;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                readonly = this.readonly;\n                _context6.next = 3;\n                return this.getAccordions();\n\n              case 3:\n                accordions = _context6.sent;\n                _iterator2 = _createForOfIteratorHelper(accordions);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    accordion = _step2.value;\n                    accordion.readonly = readonly;\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function readonlyChanged() {\n        return _readonlyChanged.apply(this, arguments);\n      }\n\n      return readonlyChanged;\n    }()\n  }, {\n    key: \"onKeydown\",\n    value: function () {\n      var _onKeydown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(ev) {\n        var activeElement, activeAccordionHeader, accordionEl, closestGroup, accordions, startingIndex, accordion;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                activeElement = document.activeElement;\n\n                if (activeElement) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 3:\n                /**\n                 * Make sure focus is in the header, not the body, of the accordion. This ensures\n                 * that if there are any interactable elements in the body, their keyboard\n                 * interaction doesn't get stolen by the accordion. Example: using up/down keys\n                 * in ion-textarea.\n                 */\n                activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n\n                if (activeAccordionHeader) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 6:\n                accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n\n                if (accordionEl) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 9:\n                closestGroup = accordionEl.closest('ion-accordion-group');\n\n                if (!(closestGroup !== this.el)) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 12:\n                _context7.next = 14;\n                return this.getAccordions();\n\n              case 14:\n                accordions = _context7.sent;\n                startingIndex = accordions.findIndex(function (a) {\n                  return a === accordionEl;\n                });\n\n                if (!(startingIndex === -1)) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 18:\n                if (ev.key === 'ArrowDown') {\n                  accordion = this.findNextAccordion(accordions, startingIndex);\n                } else if (ev.key === 'ArrowUp') {\n                  accordion = this.findPreviousAccordion(accordions, startingIndex);\n                } else if (ev.key === 'Home') {\n                  accordion = accordions[0];\n                } else if (ev.key === 'End') {\n                  accordion = accordions[accordions.length - 1];\n                }\n\n                if (accordion !== undefined && accordion !== activeElement) {\n                  accordion.focus();\n                }\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function onKeydown(_x) {\n        return _onKeydown.apply(this, arguments);\n      }\n\n      return onKeydown;\n    }()\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (this.disabled) {\n                  this.disabledChanged();\n                }\n\n                if (this.readonly) {\n                  this.readonlyChanged();\n                }\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"requestAccordionToggle\",\n    value: function () {\n      var _requestAccordionToggle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(accordionValue, accordionExpand) {\n        var multiple, value, readonly, disabled, groupValue, processedValue, valueExists, _groupValue, _processedValue;\n\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                multiple = this.multiple, value = this.value, readonly = this.readonly, disabled = this.disabled;\n\n                if (!(readonly || disabled)) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 3:\n                if (accordionExpand) {\n                  /**\n                   * If group accepts multiple values\n                   * check to see if value is already in\n                   * in values array. If not, add it\n                   * to the array.\n                   */\n                  if (multiple) {\n                    groupValue = value || [];\n                    processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n                    valueExists = processedValue.find(function (v) {\n                      return v === accordionValue;\n                    });\n\n                    if (valueExists === undefined && accordionValue !== undefined) {\n                      this.value = [].concat(_toConsumableArray(processedValue), [accordionValue]);\n                    }\n                  } else {\n                    this.value = accordionValue;\n                  }\n                } else {\n                  /**\n                   * If collapsing accordion, either filter the value\n                   * out of the values array or unset the value.\n                   */\n                  if (multiple) {\n                    _groupValue = value || [];\n                    _processedValue = Array.isArray(_groupValue) ? _groupValue : [_groupValue];\n                    this.value = _processedValue.filter(function (v) {\n                      return v !== accordionValue;\n                    });\n                  } else {\n                    this.value = undefined;\n                  }\n                }\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function requestAccordionToggle(_x2, _x3) {\n        return _requestAccordionToggle.apply(this, arguments);\n      }\n\n      return requestAccordionToggle;\n    }()\n  }, {\n    key: \"findNextAccordion\",\n    value: function findNextAccordion(accordions, startingIndex) {\n      var nextAccordion = accordions[startingIndex + 1];\n\n      if (nextAccordion === undefined) {\n        return accordions[0];\n      }\n\n      return nextAccordion;\n    }\n  }, {\n    key: \"findPreviousAccordion\",\n    value: function findPreviousAccordion(accordions, startingIndex) {\n      var prevAccordion = accordions[startingIndex - 1];\n\n      if (prevAccordion === undefined) {\n        return accordions[accordions.length - 1];\n      }\n\n      return prevAccordion;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"getAccordions\",\n    value: function () {\n      var _getAccordions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", Array.from(this.el.querySelectorAll(':scope > ion-accordion')));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getAccordions() {\n        return _getAccordions.apply(this, arguments);\n      }\n\n      return getAccordions;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class2;\n\n      var disabled = this.disabled,\n          readonly = this.readonly,\n          expand = this.expand;\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: (_class2 = {}, _defineProperty(_class2, mode, true), _defineProperty(_class2, 'accordion-group-disabled', disabled), _defineProperty(_class2, 'accordion-group-readonly', readonly), _defineProperty(_class2, \"accordion-group-expand-\".concat(expand), true), _class2),\n        role: \"presentation\"\n      }, h(\"slot\", null));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"readonly\": [\"readonlyChanged\"]\n      };\n    }\n  }]);\n\n  return AccordionGroup;\n}();\n\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };","map":null,"metadata":{},"sourceType":"module"}