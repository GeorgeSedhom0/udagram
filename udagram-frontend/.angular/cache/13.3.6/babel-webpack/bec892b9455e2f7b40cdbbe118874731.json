{"ast":null,"code":"import _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-b3eecb14.js';\nimport { g as getElementRoot } from './helpers-4d272360.js';\nvar pickerInternalIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}\";\nvar pickerInternalMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}\";\n\nvar PickerInternal = /*#__PURE__*/function () {\n  function PickerInternal(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, PickerInternal);\n\n    registerInstance(this, hostRef);\n    this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\n    this.useInputMode = false;\n\n    this.isInHighlightBounds = function (ev) {\n      var highlightEl = _this.highlightEl;\n\n      if (!highlightEl) {\n        return false;\n      }\n\n      var bbox = highlightEl.getBoundingClientRect();\n      /**\n       * Check to see if the user clicked\n       * outside the bounds of the highlight.\n       */\n\n      var outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n      var outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n\n      if (outsideX || outsideY) {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * If we are no longer focused\n     * on a picker column, then we should\n     * exit input mode. An exception is made\n     * for the input in the picker since having\n     * that focused means we are still in input mode.\n     */\n\n\n    this.onFocusOut = function (ev) {\n      var relatedTarget = ev.relatedTarget;\n\n      if (!relatedTarget || relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== _this.inputEl) {\n        _this.exitInputMode();\n      }\n    };\n    /**\n     * When picker columns receive focus\n     * the parent picker needs to determine\n     * whether to enter/exit input mode.\n     */\n\n\n    this.onFocusIn = function (ev) {\n      var target = ev.target;\n      /**\n       * Due to browser differences in how/when focus\n       * is dispatched on certain elements, we need to\n       * make sure that this function only ever runs when\n       * focusing a picker column.\n       */\n\n      if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {\n        return;\n      }\n      /**\n       * If we have actionOnClick\n       * then this means the user focused\n       * a picker column via mouse or\n       * touch (i.e. a PointerEvent). As a result,\n       * we should not enter/exit input mode\n       * until the click event has fired, which happens\n       * after the `focusin` event.\n       *\n       * Otherwise, the user likely focused\n       * the column using their keyboard and\n       * we should enter/exit input mode automatically.\n       */\n\n\n      if (!_this.actionOnClick) {\n        var columnEl = target;\n        var allowInput = columnEl.numericInput;\n\n        if (allowInput) {\n          _this.enterInputMode(columnEl, false);\n        } else {\n          _this.exitInputMode();\n        }\n      }\n    };\n    /**\n     * On click we need to run an actionOnClick\n     * function that has been set in onPointerDown\n     * so that we enter/exit input mode correctly.\n     */\n\n\n    this.onClick = function () {\n      var actionOnClick = _this.actionOnClick;\n\n      if (actionOnClick) {\n        actionOnClick();\n        _this.actionOnClick = undefined;\n      }\n    };\n    /**\n     * Clicking a column also focuses the column on\n     * certain browsers, so we use onPointerDown\n     * to tell the onFocusIn function that users\n     * are trying to click the column rather than\n     * focus the column using the keyboard. When the\n     * user completes the click, the onClick function\n     * runs and runs the actionOnClick callback.\n     */\n\n\n    this.onPointerDown = function (ev) {\n      var useInputMode = _this.useInputMode,\n          inputModeColumn = _this.inputModeColumn,\n          el = _this.el;\n\n      if (_this.isInHighlightBounds(ev)) {\n        /**\n         * If we were already in\n         * input mode, then we should determine\n         * if we tapped a particular column and\n         * should switch to input mode for\n         * that specific column.\n         */\n        if (useInputMode) {\n          /**\n           * If we tapped a picker column\n           * then we should either switch to input\n           * mode for that column or all columns.\n           * Otherwise we should exit input mode\n           * since we just tapped the highlight and\n           * not a column.\n           */\n          if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {\n            /**\n             * If user taps 2 different columns\n             * then we should just switch to input mode\n             * for the new column rather than switching to\n             * input mode for all columns.\n             */\n            if (inputModeColumn && inputModeColumn === ev.target) {\n              _this.actionOnClick = function () {\n                _this.enterInputMode();\n              };\n            } else {\n              _this.actionOnClick = function () {\n                _this.enterInputMode(ev.target);\n              };\n            }\n          } else {\n            _this.actionOnClick = function () {\n              _this.exitInputMode();\n            };\n          }\n          /**\n           * If we were not already in\n           * input mode, then we should\n           * enter input mode for all columns.\n           */\n\n        } else {\n          /**\n           * If there is only 1 numeric input column\n           * then we should skip multi column input.\n           */\n          var columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');\n          var columnEl = columns.length === 1 ? ev.target : undefined;\n\n          _this.actionOnClick = function () {\n            _this.enterInputMode(columnEl);\n          };\n        }\n\n        return;\n      }\n\n      _this.actionOnClick = function () {\n        _this.exitInputMode();\n      };\n    };\n    /**\n     * Enters input mode to allow\n     * for text entry of numeric values.\n     * If on mobile, we focus a hidden input\n     * field so that the on screen keyboard\n     * is brought up. When tabbing using a\n     * keyboard, picker columns receive an outline\n     * to indicate they are focused. As a result,\n     * we should not focus the hidden input as it\n     * would cause the outline to go away, preventing\n     * users from having any visual indication of which\n     * column is focused.\n     */\n\n\n    this.enterInputMode = function (columnEl) {\n      var focusInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var inputEl = _this.inputEl,\n          el = _this.el;\n\n      if (!inputEl) {\n        return;\n      }\n      /**\n       * Only active input mode if there is at\n       * least one column that accepts numeric input.\n       */\n\n\n      var hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');\n\n      if (!hasInputColumn) {\n        return;\n      }\n      /**\n       * If columnEl is undefined then\n       * it is assumed that all numeric pickers\n       * are eligible for text entry.\n       * (i.e. hour and minute columns)\n       */\n\n\n      _this.useInputMode = true;\n      _this.inputModeColumn = columnEl;\n      /**\n       * Users with a keyboard and mouse can\n       * activate input mode where the input is\n       * focused as well as when it is not focused,\n       * so we need to make sure we clean up any\n       * old listeners.\n       */\n\n      if (focusInput) {\n        if (_this.destroyKeypressListener) {\n          _this.destroyKeypressListener();\n\n          _this.destroyKeypressListener = undefined;\n        }\n\n        inputEl.focus();\n      } else {\n        el.addEventListener('keypress', _this.onKeyPress);\n\n        _this.destroyKeypressListener = function () {\n          el.removeEventListener('keypress', _this.onKeyPress);\n        };\n      }\n\n      _this.emitInputModeChange();\n    };\n\n    this.exitInputMode = function () {\n      var inputEl = _this.inputEl,\n          useInputMode = _this.useInputMode;\n\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n\n      _this.useInputMode = false;\n      _this.inputModeColumn = undefined;\n      inputEl.blur();\n      inputEl.value = '';\n\n      if (_this.destroyKeypressListener) {\n        _this.destroyKeypressListener();\n\n        _this.destroyKeypressListener = undefined;\n      }\n\n      _this.emitInputModeChange();\n    };\n\n    this.onKeyPress = function (ev) {\n      var inputEl = _this.inputEl;\n\n      if (!inputEl) {\n        return;\n      }\n\n      var parsedValue = parseInt(ev.key, 10);\n      /**\n       * Only numbers should be allowed\n       */\n\n      if (!Number.isNaN(parsedValue)) {\n        inputEl.value += ev.key;\n\n        _this.onInputChange();\n      }\n    };\n\n    this.selectSingleColumn = function () {\n      var inputEl = _this.inputEl,\n          inputModeColumn = _this.inputModeColumn,\n          singleColumnSearchTimeout = _this.singleColumnSearchTimeout;\n\n      if (!inputEl || !inputModeColumn) {\n        return;\n      }\n\n      var values = inputModeColumn.items;\n      /**\n       * If users pause for a bit, the search\n       * value should be reset similar to how a\n       * <select> behaves. So typing \"34\", waiting,\n       * then typing \"5\" should select \"05\".\n       */\n\n      if (singleColumnSearchTimeout) {\n        clearTimeout(singleColumnSearchTimeout);\n      }\n\n      _this.singleColumnSearchTimeout = setTimeout(function () {\n        inputEl.value = '';\n        _this.singleColumnSearchTimeout = undefined;\n      }, 1000);\n      /**\n       * For values that are longer than 2 digits long\n       * we should shift the value over 1 character\n       * to the left. So typing \"456\" would result in \"56\".\n       * TODO: If we want to support more than just\n       * time entry, we should update this value to be\n       * the max length of all of the picker items.\n       */\n\n      if (inputEl.value.length >= 3) {\n        var startIndex = inputEl.value.length - 2;\n        var newString = inputEl.value.substring(startIndex);\n        inputEl.value = newString;\n\n        _this.selectSingleColumn();\n\n        return;\n      }\n      /**\n       * Checking the value of the input gets priority\n       * first. For example, if the value of the input\n       * is \"1\" and we entered \"2\", then the complete value\n       * is \"12\" and we should select hour 12.\n       *\n       * Regex removes any leading zeros from values like \"02\".\n       */\n\n\n      var findItemFromCompleteValue = values.find(function (_ref) {\n        var text = _ref.text;\n        return text.replace(/^0+/, '') === inputEl.value;\n      });\n\n      if (findItemFromCompleteValue) {\n        inputModeColumn.value = findItemFromCompleteValue.value;\n        return;\n      }\n      /**\n       * If we typed \"56\" to get minute 56, then typed \"7\",\n       * we should select \"07\" as \"567\" is not a valid minute.\n       */\n\n\n      if (inputEl.value.length === 2) {\n        var changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n        inputEl.value = changedCharacter;\n\n        _this.selectSingleColumn();\n      }\n    };\n    /**\n     * Searches a list of column items for a particular\n     * value. This is currently used for numeric values.\n     * The zeroBehavior can be set to account for leading\n     * or trailing zeros when looking at the item text.\n     */\n\n\n    this.searchColumn = function (colEl, value) {\n      var zeroBehavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'start';\n      var behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n      var item = colEl.items.find(function (_ref2) {\n        var text = _ref2.text;\n        return text.replace(behavior, '') === value;\n      });\n\n      if (item) {\n        colEl.value = item.value;\n      }\n    };\n\n    this.selectMultiColumn = function () {\n      var inputEl = _this.inputEl,\n          el = _this.el;\n\n      if (!inputEl) {\n        return;\n      }\n\n      var numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter(function (col) {\n        return col.numericInput;\n      });\n      var firstColumn = numericPickers[0];\n      var lastColumn = numericPickers[1];\n      var value = inputEl.value;\n      var minuteValue;\n\n      switch (value.length) {\n        case 1:\n          _this.searchColumn(firstColumn, value);\n\n          break;\n\n        case 2:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          var firstCharacter = inputEl.value.substring(0, 1);\n          value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\n\n          _this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n\n          if (value.length === 1) {\n            minuteValue = inputEl.value.substring(inputEl.value.length - 1);\n\n            _this.searchColumn(lastColumn, minuteValue, 'end');\n          }\n\n          break;\n\n        case 3:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          var firstCharacterAgain = inputEl.value.substring(0, 1);\n          value = firstCharacterAgain === '0' || firstCharacterAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgain;\n\n          _this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n\n          minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\n\n          _this.searchColumn(lastColumn, minuteValue, 'end');\n\n          break;\n\n        case 4:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          var firstCharacterAgainAgain = inputEl.value.substring(0, 1);\n          value = firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgainAgain;\n\n          _this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n\n          var minuteValueAgain = value.length === 1 ? inputEl.value.substring(1, inputEl.value.length) : inputEl.value.substring(2, inputEl.value.length);\n\n          _this.searchColumn(lastColumn, minuteValueAgain, 'end');\n\n          break;\n\n        default:\n          var startIndex = inputEl.value.length - 4;\n          var newString = inputEl.value.substring(startIndex);\n          inputEl.value = newString;\n\n          _this.selectMultiColumn();\n\n          break;\n      }\n    };\n    /**\n     * Searches the value of the active column\n     * to determine which value users are trying\n     * to select\n     */\n\n\n    this.onInputChange = function () {\n      var useInputMode = _this.useInputMode,\n          inputEl = _this.inputEl,\n          inputModeColumn = _this.inputModeColumn;\n\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n\n      if (inputModeColumn) {\n        _this.selectSingleColumn();\n      } else {\n        _this.selectMultiColumn();\n      }\n    };\n    /**\n     * Emit ionInputModeChange. Picker columns\n     * listen for this event to determine whether\n     * or not their column is \"active\" for text input.\n     */\n\n\n    this.emitInputModeChange = function () {\n      var useInputMode = _this.useInputMode,\n          inputModeColumn = _this.inputModeColumn;\n\n      _this.ionInputModeChange.emit({\n        useInputMode: useInputMode,\n        inputModeColumn: inputModeColumn\n      });\n    };\n  }\n\n  _createClass(PickerInternal, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n      getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return h(Host, {\n        onPointerDown: function onPointerDown(ev) {\n          return _this2.onPointerDown(ev);\n        },\n        onClick: function onClick() {\n          return _this2.onClick();\n        }\n      }, h(\"input\", {\n        \"aria-hidden\": \"true\",\n        tabindex: -1,\n        inputmode: \"numeric\",\n        type: \"number\",\n        ref: function ref(el) {\n          return _this2.inputEl = el;\n        },\n        onInput: function onInput() {\n          return _this2.onInputChange();\n        },\n        onBlur: function onBlur() {\n          return _this2.exitInputMode();\n        }\n      }), h(\"div\", {\n        class: \"picker-before\"\n      }), h(\"div\", {\n        class: \"picker-after\"\n      }), h(\"div\", {\n        class: \"picker-highlight\",\n        ref: function ref(el) {\n          return _this2.highlightEl = el;\n        }\n      }), h(\"slot\", null));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return PickerInternal;\n}();\n\nPickerInternal.style = {\n  ios: pickerInternalIosCss,\n  md: pickerInternalMdCss\n};\nexport { PickerInternal as ion_picker_internal };","map":null,"metadata":{},"sourceType":"module"}