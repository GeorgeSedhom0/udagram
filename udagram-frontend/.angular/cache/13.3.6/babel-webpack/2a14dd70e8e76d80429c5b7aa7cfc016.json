{"ast":null,"code":"import _defineProperty from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _asyncToGenerator from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"F:\\\\New folder (17)\\\\nd0067-c4-deployment-process-project-starter\\\\udagram\\\\udagram-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-b3eecb14.js';\nimport { r as reorderThreeOutline, h as reorderTwoSharp } from './index-e3f61316.js';\nimport { b as getIonMode } from './ionic-global-f1ce4d2d.js';\nimport { a as findClosestIonContent, g as getScrollElement } from './index-7cd5eefa.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-683b3b3c.js';\nimport './helpers-4d272360.js';\nimport './index-9ac92660.js';\nvar reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\nvar reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nvar Reorder = /*#__PURE__*/function () {\n  function Reorder(hostRef) {\n    _classCallCheck(this, Reorder);\n\n    registerInstance(this, hostRef);\n  }\n\n  _createClass(Reorder, [{\n    key: \"onClick\",\n    value: function onClick(ev) {\n      var reorderGroup = this.el.closest('ion-reorder-group');\n      ev.preventDefault(); // Only stop event propagation if the reorder is inside of an enabled\n      // reorder group. This allows interaction with clickable children components.\n\n      if (!reorderGroup || !reorderGroup.disabled) {\n        ev.stopImmediatePropagation();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      var reorderIcon = mode === 'ios' ? reorderThreeOutline : reorderTwoSharp;\n      return h(Host, {\n        class: mode\n      }, h(\"slot\", null, h(\"ion-icon\", {\n        icon: reorderIcon,\n        lazy: false,\n        class: \"reorder-icon\",\n        part: \"icon\"\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return Reorder;\n}();\n\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\nvar reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nvar ReorderGroup = /*#__PURE__*/function () {\n  function ReorderGroup(hostRef) {\n    _classCallCheck(this, ReorderGroup);\n\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0\n    /* Idle */\n    ;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n\n    this.disabled = true;\n  }\n\n  _createClass(ReorderGroup, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.disabled);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentEl = findClosestIonContent(this.el);\n\n                if (!contentEl) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return getScrollElement(contentEl);\n\n              case 4:\n                this.scrollEl = _context.sent;\n\n              case 5:\n                _context.next = 7;\n                return import('./index-3f1a7d95.js');\n\n              case 7:\n                this.gesture = _context.sent.createGesture({\n                  el: this.el,\n                  gestureName: 'reorder',\n                  gesturePriority: 110,\n                  threshold: 0,\n                  direction: 'y',\n                  passive: false,\n                  canStart: function canStart(detail) {\n                    return _this.canStart(detail);\n                  },\n                  onStart: function onStart(ev) {\n                    return _this.onStart(ev);\n                  },\n                  onMove: function onMove(ev) {\n                    return _this.onMove(ev);\n                  },\n                  onEnd: function onEnd() {\n                    return _this.onEnd();\n                  }\n                });\n                this.disabledChanged();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.onEnd();\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n    /**\n     * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n     *\n     * If a list of items is passed, the list will be reordered and returned in the\n     * proper order.\n     *\n     * If no parameters are passed or if `true` is passed in, the reorder will complete\n     * and the item will remain in the position it was dragged to. If `false` is passed,\n     * the reorder will complete and the item will bounce back to its original position.\n     *\n     * @param listOrReorder A list of items to be sorted and returned in the new order or a\n     * boolean of whether or not the reorder should reposition the item.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete(listOrReorder) {\n      return Promise.resolve(this.completeSync(listOrReorder));\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart(ev) {\n      if (this.selectedItemEl || this.state !== 0\n      /* Idle */\n      ) {\n        return false;\n      }\n\n      var target = ev.event.target;\n      var reorderEl = target.closest('ion-reorder');\n\n      if (!reorderEl) {\n        return false;\n      }\n\n      var item = findReorderItem(reorderEl, this.el);\n\n      if (!item) {\n        return false;\n      }\n\n      ev.data = item;\n      return true;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(ev) {\n      ev.event.preventDefault();\n      var item = this.selectedItemEl = ev.data;\n      var heights = this.cachedHeights;\n      heights.length = 0;\n      var el = this.el;\n      var children = el.children;\n\n      if (!children || children.length === 0) {\n        return;\n      }\n\n      var sum = 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        sum += child.offsetHeight;\n        heights.push(sum);\n        child.$ionIndex = i;\n      }\n\n      var box = el.getBoundingClientRect();\n      this.containerTop = box.top;\n      this.containerBottom = box.bottom;\n\n      if (this.scrollEl) {\n        var scrollBox = this.scrollEl.getBoundingClientRect();\n        this.scrollElInitial = this.scrollEl.scrollTop;\n        this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n        this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n      } else {\n        this.scrollElInitial = 0;\n        this.scrollElTop = 0;\n        this.scrollElBottom = 0;\n      }\n\n      this.lastToIndex = indexForItem(item);\n      this.selectedItemHeight = item.offsetHeight;\n      this.state = 1\n      /* Active */\n      ;\n      item.classList.add(ITEM_REORDER_SELECTED);\n      hapticSelectionStart();\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(ev) {\n      var selectedItem = this.selectedItemEl;\n\n      if (!selectedItem) {\n        return;\n      } // Scroll if we reach the scroll margins\n\n\n      var scroll = this.autoscroll(ev.currentY); // // Get coordinate\n\n      var top = this.containerTop - scroll;\n      var bottom = this.containerBottom - scroll;\n      var currentY = Math.max(top, Math.min(ev.currentY, bottom));\n      var deltaY = scroll + currentY - ev.startY;\n      var normalizedY = currentY - top;\n      var toIndex = this.itemIndexForTop(normalizedY);\n\n      if (toIndex !== this.lastToIndex) {\n        var fromIndex = indexForItem(selectedItem);\n        this.lastToIndex = toIndex;\n        hapticSelectionChanged();\n        this.reorderMove(fromIndex, toIndex);\n      } // Update selected item position\n\n\n      selectedItem.style.transform = \"translateY(\".concat(deltaY, \"px)\");\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      var selectedItemEl = this.selectedItemEl;\n      this.state = 2\n      /* Complete */\n      ;\n\n      if (!selectedItemEl) {\n        this.state = 0\n        /* Idle */\n        ;\n        return;\n      }\n\n      var toIndex = this.lastToIndex;\n      var fromIndex = indexForItem(selectedItemEl);\n\n      if (toIndex === fromIndex) {\n        this.completeSync();\n      } else {\n        this.ionItemReorder.emit({\n          from: fromIndex,\n          to: toIndex,\n          complete: this.completeSync.bind(this)\n        });\n      }\n\n      hapticSelectionEnd();\n    }\n  }, {\n    key: \"completeSync\",\n    value: function completeSync(listOrReorder) {\n      var selectedItemEl = this.selectedItemEl;\n\n      if (selectedItemEl && this.state === 2\n      /* Complete */\n      ) {\n        var children = this.el.children;\n        var len = children.length;\n        var toIndex = this.lastToIndex;\n        var fromIndex = indexForItem(selectedItemEl);\n\n        if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n          var ref = fromIndex < toIndex ? children[toIndex + 1] : children[toIndex];\n          this.el.insertBefore(selectedItemEl, ref);\n        }\n\n        if (Array.isArray(listOrReorder)) {\n          listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n        }\n\n        for (var i = 0; i < len; i++) {\n          children[i].style['transform'] = '';\n        }\n\n        selectedItemEl.style.transition = '';\n        selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n        this.selectedItemEl = undefined;\n        this.state = 0\n        /* Idle */\n        ;\n      }\n\n      return listOrReorder;\n    }\n  }, {\n    key: \"itemIndexForTop\",\n    value: function itemIndexForTop(deltaY) {\n      var heights = this.cachedHeights; // TODO: since heights is a sorted array of integers, we can do\n      // speed up the search using binary search. Remember that linear-search is still\n      // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n\n      for (var i = 0; i < heights.length; i++) {\n        if (heights[i] > deltaY) {\n          return i;\n        }\n      }\n\n      return heights.length - 1;\n    }\n    /********* DOM WRITE ********* */\n\n  }, {\n    key: \"reorderMove\",\n    value: function reorderMove(fromIndex, toIndex) {\n      var itemHeight = this.selectedItemHeight;\n      var children = this.el.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var style = children[i].style;\n        var value = '';\n\n        if (i > fromIndex && i <= toIndex) {\n          value = \"translateY(\".concat(-itemHeight, \"px)\");\n        } else if (i < fromIndex && i >= toIndex) {\n          value = \"translateY(\".concat(itemHeight, \"px)\");\n        }\n\n        style['transform'] = value;\n      }\n    }\n  }, {\n    key: \"autoscroll\",\n    value: function autoscroll(posY) {\n      if (!this.scrollEl) {\n        return 0;\n      }\n\n      var amount = 0;\n\n      if (posY < this.scrollElTop) {\n        amount = -SCROLL_JUMP;\n      } else if (posY > this.scrollElBottom) {\n        amount = SCROLL_JUMP;\n      }\n\n      if (amount !== 0) {\n        this.scrollEl.scrollBy(0, amount);\n      }\n\n      return this.scrollEl.scrollTop - this.scrollElInitial;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class;\n\n      var mode = getIonMode(this);\n      return h(Host, {\n        class: (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'reorder-enabled', !this.disabled), _defineProperty(_class, 'reorder-list-active', this.state !== 0), _class)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n\n  return ReorderGroup;\n}();\n\nvar indexForItem = function indexForItem(element) {\n  return element['$ionIndex'];\n};\n\nvar findReorderItem = function findReorderItem(node, container) {\n  var parent;\n\n  while (node) {\n    parent = node.parentElement;\n\n    if (parent === container) {\n      return node;\n    }\n\n    node = parent;\n  }\n\n  return undefined;\n};\n\nvar AUTO_SCROLL_MARGIN = 60;\nvar SCROLL_JUMP = 10;\nvar ITEM_REORDER_SELECTED = 'reorder-selected';\n\nvar reorderArray = function reorderArray(array, from, to) {\n  var element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\n\nReorderGroup.style = reorderGroupCss;\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };","map":null,"metadata":{},"sourceType":"module"}